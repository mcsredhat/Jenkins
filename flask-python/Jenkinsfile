pipeline {
    agent any

    environment {
        DOCKER_REGISTRY = 'https://index.docker.io/v1/'
        DOCKER_USERNAME = 'farajassulai'
        DOCKER_REPO = 'flask-python-app'
        IMAGE_NAME = "${DOCKER_USERNAME}/${DOCKER_REPO}"
        BUILD_TAG = "${env.BUILD_NUMBER}-${env.GIT_COMMIT?.take(7) ?: 'unknown'}"
        CONTAINER_NAME = "flask-python-${env.BUILD_NUMBER}"
        TEST_CONTAINER_NAME = "test-container-${env.BUILD_NUMBER}"
        GITHUB_REPO = 'https://github.com/mcsredhat/Jenkins'
        APP_PORT = "5000"
        TEST_PORT = "5050"
        // Define the application directory
        APP_DIR = "flask-python"
        
        // ENABLE DEPLOYMENT STAGES - Set these to enable stages
        SKIP_SECURITY_SCAN = 'false'  // Changed from 'true' to 'false'
        ENABLE_DOCKER_PUSH = 'true'   // New variable to enable Docker push
        ENABLE_STAGING_DEPLOY = 'true' // New variable to enable staging deployment  
        ENABLE_PRODUCTION_DEPLOY = 'true' // New variable to enable production deployment
        
        // Override branch detection for testing (remove these in production)
        FORCE_BRANCH_MAIN = 'true'     // Force treat as main branch
        FORCE_BRANCH_DEVELOP = 'false'  // Force treat as develop branch
        
        // Email configuration
        EMAIL_CONFIGURED = 'false'     // Set to 'true' if you want email notifications
    }

    stages {
        stage('Checkout') {
            steps {
                echo "üì¶ Checking out code from GitHub repository..."
                checkout scm

                script {
                    echo "Current branch: ${env.BRANCH_NAME ?: 'main'}"
                    echo "Git commit: ${env.GIT_COMMIT ?: 'unknown'}"
                    echo "Repository URL: ${GITHUB_REPO}"
                    
                    echo "Working in directory: ${pwd()}"
                    sh "ls -la"
                    
                    // Check if the app directory exists
                    echo "Checking for application directory: ${APP_DIR}"
                    sh "ls -la ${APP_DIR}/ || echo 'Application directory not found'"
                    
                    // Check for required files in the app directory
                    echo "Checking for required files in ${APP_DIR}:"
                    sh """
                        cd ${APP_DIR}
                        ls -la Dockerfile requirements.txt ./src/app.py || echo 'Some files not found in ${APP_DIR}'
                    """
                }
            }
        }

        stage('Build') {
            steps {
                echo "üîß Building Docker image..."
                script {
                    try {
                        // Change to the application directory for building
                        dir(APP_DIR) {
                            def image = docker.build("${IMAGE_NAME}:${BUILD_TAG}", ".")
                            image.tag("jenk-flask-pyton")
                            echo "‚úÖ Image built successfully: ${IMAGE_NAME}:${BUILD_TAG}"
                        }
                    } catch (Exception e) {
                        echo "‚ùå Build failed: ${e.getMessage()}"
                        throw e
                    }
                }
            }
        }

        stage('Test') {
            steps {
                echo "üß™ Running containerized tests..."
                script {
                    try {
                        sh """
                            docker run -d --name ${TEST_CONTAINER_NAME} \
                            -p ${TEST_PORT}:${APP_PORT} \
                            -e ENVIRONMENT=test \
                            -e APP_PORT=${APP_PORT} \
                            ${IMAGE_NAME}:${BUILD_TAG}
                        """

                        echo "‚åõ Waiting for application to start..."
                        retry(5) {
                            sleep 10
                            sh "curl -f http://localhost:${TEST_PORT}/health || curl -f http://localhost:${TEST_PORT}/"
                        }

                        echo "‚úÖ Health check passed!"
                    } catch (Exception e) {
                        echo "‚ùå Test failed: ${e.getMessage()}"
                        throw e
                    } finally {
                        sh """
                            docker stop ${TEST_CONTAINER_NAME} || true
                            docker rm ${TEST_CONTAINER_NAME} || true
                        """
                    }
                }
            }
        }

        stage('Security Scan') {
            when {
                anyOf {
                    environment name: 'SKIP_SECURITY_SCAN', value: 'false'
                    environment name: 'FORCE_SECURITY_SCAN', value: 'true'
                }
            }
            steps {
                echo "üîç Running security scan with Trivy..."
                script {
                    try {
                        // Check if Trivy is available, if not, skip with warning
                        def trivyAvailable = sh(
                            script: "docker run --rm aquasec/trivy:latest --version",
                            returnStatus: true
                        )
                        
                        if (trivyAvailable != 0) {
                            echo "‚ö†Ô∏è Trivy not available, skipping security scan"
                            currentBuild.result = 'UNSTABLE'
                            return
                        }
                        
                        // First, run a comprehensive scan to see all vulnerabilities
                        echo "üìä Running comprehensive vulnerability scan..."
                        sh """
                            docker run --rm -v /var/run/docker.sock:/var/run/docker.sock \
                            aquasec/trivy:latest image \
                            --format table \
                            --severity LOW,MEDIUM,HIGH,CRITICAL \
                            ${IMAGE_NAME}:${BUILD_TAG} || true
                        """
                        
                        // Then run the critical check (but don't fail the build for now)
                        echo "üö® Checking for CRITICAL vulnerabilities only..."
                        def criticalScanResult = sh(
                            script: """
                                docker run --rm -v /var/run/docker.sock:/var/run/docker.sock \
                                aquasec/trivy:latest image \
                                --exit-code 1 --severity CRITICAL \
                                --format table \
                                ${IMAGE_NAME}:${BUILD_TAG} || true
                            """,
                            returnStatus: true
                        )
                        
                        if (criticalScanResult == 0) {
                            echo "‚úÖ No CRITICAL vulnerabilities found"
                        } else {
                            echo "‚ö†Ô∏è CRITICAL vulnerabilities found - marking build as unstable"
                            currentBuild.result = 'UNSTABLE'
                        }
                        
                        echo "‚úÖ Security scan completed"
                        
                    } catch (Exception e) {
                        echo "‚ùå Security scan failed: ${e.getMessage()}"
                        // Don't fail the build, just mark as unstable
                        currentBuild.result = 'UNSTABLE'
                    }
                }
            }
        }

        stage('Push to Docker Hub') {
            when {
                anyOf {
                    // Original conditions
                    branch 'main'
                    branch 'develop'
                    // New conditions for enabling push
                    environment name: 'ENABLE_DOCKER_PUSH', value: 'true'
                    environment name: 'FORCE_BRANCH_MAIN', value: 'true'
                    environment name: 'FORCE_BRANCH_DEVELOP', value: 'true'
                }
            }
            steps {
                echo "üì§ Pushing image to Docker Hub..."
                script {
                    try {
                        // Check if Docker Hub credentials are configured
                        def credentialsExist = sh(
                            script: "docker info | grep -i 'registry' || echo 'Docker daemon accessible'",
                            returnStatus: true
                        )
                        
                        // Try to push with credentials if available, otherwise push without registry authentication
                        try {
                            docker.withRegistry("${DOCKER_REGISTRY}", 'dockerhub-credentials') {
                                def image = docker.image("${IMAGE_NAME}:${BUILD_TAG}")
                                image.push()
                                image.push("jenkins-latest")

                                if (env.BRANCH_NAME == 'main' || env.FORCE_BRANCH_MAIN == 'true') {
                                    image.push("production")
                                    image.push("v1.0.0")
                                } else if (env.BRANCH_NAME == 'develop' || env.FORCE_BRANCH_DEVELOP == 'true') {
                                    image.push("staging")
                                    image.push("develop-latest")
                                }
                                
                                echo "‚úÖ Image pushed successfully with credentials"
                            }
                        } catch (Exception credError) {
                            echo "‚ö†Ô∏è Docker Hub credentials not found, attempting push without registry authentication..."
                            
                            // Manual push without registry wrapper
                            sh """
                                docker push ${IMAGE_NAME}:${BUILD_TAG} || echo "Push failed - check Docker Hub login"
                                docker push ${IMAGE_NAME}:jenkins-latest || echo "Push failed - check Docker Hub login"
                            """
                            
                            echo "‚úÖ Image push attempted (check Docker Hub for results)"
                        }
                        
                    } catch (Exception e) {
                        echo "‚ùå Docker Hub push failed: ${e.getMessage()}"
                        echo "üí° To fix: Run 'docker login' on Jenkins agent or configure 'dockerhub-credentials'"
                        currentBuild.result = 'UNSTABLE'
                    }
                }
            }
        }

        stage('Deploy to Staging') {
            when {
                anyOf {
                    branch 'develop'
                    environment name: 'ENABLE_STAGING_DEPLOY', value: 'true'
                    environment name: 'FORCE_BRANCH_DEVELOP', value: 'true'
                }
            }
            steps {
                echo "üöÄ Deploying to staging..."
                script {
                    deployToEnvironment('staging', '8088')
                }
            }
        }

        stage('Deploy to Production') {
            when {
                anyOf {
                    branch 'main'
                    environment name: 'ENABLE_PRODUCTION_DEPLOY', value: 'true'
                    environment name: 'FORCE_BRANCH_MAIN', value: 'true'
                }
            }
            steps {
                script {
                    // Make input optional for testing
                    if (env.SKIP_PRODUCTION_APPROVAL != 'true') {
                        try {
                            timeout(time: 5, unit: 'MINUTES') {
                                input message: 'Deploy to production?', ok: 'Deploy'
                            }
                        } catch (Exception e) {
                            echo "‚ö†Ô∏è Production deployment approval timeout or skipped"
                            return
                        }
                    }
                    
                    echo "üöÄ Deploying to production..."
                    deployToEnvironment('production', '9090')  // Changed from port 80 to 9090 to avoid permission issues
                }
            }
        }
    }

    post {
        always {
            echo "üßπ Cleaning up..."
            script {
                sh """
                    docker stop ${TEST_CONTAINER_NAME} || true
                    docker rm ${TEST_CONTAINER_NAME} || true
                    docker system prune -f --filter "until=24h"
                """
            }
        }

        success {
            echo "‚úÖ Pipeline completed successfully!"
            script {
                try {
                    // Only send email if email configuration is available
                    if (env.EMAIL_CONFIGURED == 'true') {
                        emailext(
                            subject: "‚úÖ Build Success: ${env.JOB_NAME} #${env.BUILD_NUMBER}",
                            body: """
                                ‚úîÔ∏è Build succeeded!

                                Job: ${env.JOB_NAME}
                                Build Number: ${env.BUILD_NUMBER}
                                Branch: ${env.BRANCH_NAME ?: 'main'}
                                Image: ${IMAGE_NAME}:${BUILD_TAG}

                                GitHub: ${GITHUB_REPO}
                                Docker Hub: https://hub.docker.com/r/${DOCKER_USERNAME}/${DOCKER_REPO}
                                Build URL: ${env.BUILD_URL}
                            """,
                            recipientProviders: [developers()]
                        )
                    } else {
                        echo "Email notification skipped - EMAIL_CONFIGURED not set to true"
                    }
                } catch (Exception e) {
                    echo "‚ö†Ô∏è Failed to send success email: ${e.getMessage()}"
                }
            }
        }

        failure {
            echo "‚ùå Pipeline failed!"
            script {
                try {
                    // Only send email if email configuration is available
                    if (env.EMAIL_CONFIGURED == 'true') {
                        emailext(
                            subject: "‚ùå Build Failed: ${env.JOB_NAME} #${env.BUILD_NUMBER}",
                            body: """
                                ‚ùå Build failed!

                                Job: ${env.JOB_NAME}
                                Branch: ${env.BRANCH_NAME ?: 'main'}
                                Build URL: ${env.BUILD_URL}

                                Please check the console output for details:
                                ${env.BUILD_URL}console
                            """,
                            recipientProviders: [developers(), requestor()]
                        )
                    } else {
                        echo "Email notification skipped - EMAIL_CONFIGURED not set to true"
                    }
                } catch (Exception e) {
                    echo "‚ö†Ô∏è Failed to send failure email: ${e.getMessage()}"
                }
            }
        }

        unstable {
            echo "‚ö†Ô∏è Pipeline completed with warnings."
        }
    }
}

// Helper function for deployment
def deployToEnvironment(environment, port) {
    def containerName = "node-app-${environment}"
    try {
        echo "üöÄ Deploying ${IMAGE_NAME}:${BUILD_TAG} to ${environment} on port ${port}"
        
        sh """
            docker stop ${containerName} || true
            docker rm ${containerName} || true
            docker run -d \
                --name ${containerName} \
                -p ${port}:${APP_PORT} \
                -e ENVIRONMENT=${environment} \
                -e APP_PORT=${APP_PORT} \
                --restart=unless-stopped \
                --memory=512m \
                --cpus=0.5 \
                --health-cmd="curl -f http://localhost:${APP_PORT}/health || exit 1" \
                --health-interval=30s \
                --health-timeout=10s \
                --health-retries=3 \
                ${IMAGE_NAME}:${BUILD_TAG}
        """

        echo "‚åõ Waiting for deployment to stabilize..."
        sleep 15

        echo "üîç Checking deployment health..."
        retry(3) {
            sh """
                echo "Testing health endpoint..."
                curl -f http://localhost:${port}/health || curl -f http://localhost:${port}/ || echo "Health check failed but continuing..."
            """
        }

        echo "‚úÖ Successfully deployed to ${environment} on port ${port}"
        echo "üåê Access the application at: http://localhost:${port}"
        
        // Show running containers
        sh "docker ps | grep ${containerName} || echo 'Container not found in ps'"
        
    } catch (Exception e) {
        echo "‚ùå Deployment to ${environment} failed: ${e.getMessage()}"
        echo "üîç Checking what went wrong..."
        sh """
            docker logs ${containerName} || echo "No logs available"
            docker ps -a | grep ${containerName} || echo "Container not found"
        """
        throw e
    }
}
