# Enhanced Pipeline Configuration
# Note: appType refers to the primary service (php), but multiple services (php, mysql, adminer) are managed
appType: php
appName: php_mysql_app
appDir: .
composeFile: docker-compose.yml
useCompose: true
deploymentStrategy: canary  # Must be one of: rolling, blue-green, canary

# Service-specific Ports
services:
  php:
    appPort: 8989
    testPort: 8383
  mysql:
    appPort: 3306
    testPort: 3366
  adminer:
    appPort: 8181
    testPort: 8181

# Build Configuration
build:
  context: .
  target: production
  args:
    PHPVER: 8.1-apache
    SQLVER: 8.0
    MYSQL_ROOT_PASSWORD: "${MYSQL_ROOT_PASSWORD}"
    MYSQL_DATABASE: "${MYSQL_DATABASE}"
    MYSQL_USER: "${MYSQL_USER}"
    MYSQL_PASSWORD: "${MYSQL_PASSWORD}"
    USER_ID: 1010
    USER_NAME: sqluser
    GROUP_ID: 1010
    GROUP_NAME: sqlgroup
    APP_DIR: /sqldb
    MOUNT1: /sqldb/data
    MOUNT2: /sqldb/logs
    BASH_SHELL: /bin/bash
  cache:
    enabled: true
    layers: [ "dependencies", "build" ]
  multiarch:
    enabled: true
    platforms: [ "linux/amd64", "linux/arm64" ]

# Security Configuration
security:
  signing:
    enabled: true
    keyId: "cosign-key"
  scanners:
    secrets:
      enabled: true
      tool: "truffleHog"
      failOnHigh: false
    vulnerabilities:
      enabled: true
      tools: [ "trivy", "grype" ]
      thresholds:
        critical: 0
        high: 5
        medium: 20
    sast:
      enabled: true
      tools: [ "sonar", "semgrep" ]
    dependencies:
      enabled: true
      failOnHigh: true

# Testing Configuration
testing:
  unit:
    enabled: true
    coverage:
      threshold: 80
      format: [ "lcov", "cobertura" ]
  integration:
    enabled: true
    timeout: 300
    retries: 3
  performance:
    enabled: true
    thresholds:
      maxLatency: 1000
      maxErrorRate: 0.01
    duration: 60
  contract:
    enabled: true
    provider: "pact"
  chaos:
    enabled: false
    duration: 60

# Deployment Configuration
# Note: Ensure MYSQL_ROOT_PASSWORD, MYSQL_DATABASE, MYSQL_USER, MYSQL_PASSWORD are set in .env
deployment:
  environments:
    staging:
      enabled: true
      services:
        php:
          port: 8989
          replicas: 2
          resources:
            memory: "1g"
            cpu: "0.5"
          healthcheck:
            command: "curl -f http://localhost:8989/ || exit 1"
            timeout: 30
            interval: 10
        mysql:
          port: 3306
          replicas: 1
          resources:
            memory: "1g"
            cpu: "0.5"
          healthcheck:
            command: "mysqladmin ping -h localhost -u ${MYSQL_USER} --password=${MYSQL_PASSWORD}"
            timeout: 30
            interval: 10
        adminer:
          port: 8181
          replicas: 1
          resources:
            memory: "512m"
            cpu: "0.25"
          healthcheck:
            command: "curl -f http://localhost:8080 || exit 1"
            timeout: 30
            interval: 10
      approvalRequired: false
    production:
      enabled: true
      services:
        php:
          port: 8989
          replicas: 3
          resources:
            memory: "1g"
            cpu: "0.5"
          healthcheck:
            command: "curl -f http://localhost:8989/ || exit 1"
            timeout: 30
            interval: 10
        mysql:
          port: 3306
          replicas: 1
          resources:
            memory: "1g"
            cpu: "0.5"
          healthcheck:
            command: "mysqladmin ping -h localhost -u ${MYSQL_USER} --password=${MYSQL_PASSWORD}"
            timeout: 30
            interval: 10
        adminer:
          port: 8181
          replicas: 1
          resources:
            memory: "512m"
            cpu: "0.25"
          healthcheck:
            command: "curl -f http://localhost:8080 || exit 1"
            timeout: 30
            interval: 10
      approvalRequired: true

  strategies:
    rolling:
      maxUnavailable: 1
      maxSurge: 1
    bluegreen:
      testTrafficPercent: 10
      promotionTimeout: 300
    canary:
      testTrafficPercent: 10
      promotionTimeout: 300

# Monitoring Configuration
monitoring:
  metrics:
    enabled: true
    prometheus:
      gateway: "http://pushgateway:9091"
      namespace: "jenkins"
    custom:
    - name: "build_duration"
      type: "histogram"
    - name: "test_coverage"
      type: "gauge"
  tracing:
    enabled: false
    jaeger:
      endpoint: "http://jaeger:14268/api/traces"
  logging:
    level: "INFO"
    structured: true
    retention: "7d"

# Notifications Configuration
notifications:
  slack:
    enabled: true
    channel: "#deployments"
    webhook: "${SLACK_WEBHOOK_URL}"
    events: [ "success", "failure", "unstable" ]
  email:
    enabled: false
    recipients: [ "team@company.com" ]
    smtp:
      server: "smtp.company.com"
      port: 587
  github:
    enabled: true
    token: "${GITHUB_TOKEN}"
    events: [ "status", "pr_comment" ]

# Resource Management
resources:
  limits:
    memory: "1g"
    cpu: "0.5"
  requests:
    memory: "512m"
    cpu: "0.25"
  docker:
    memory: "1g"
    cpu: "0.5"
    storage: "10g"

# Feature Flags
features:
  parallelTesting: true
  dockerCache: true
  buildxEnabled: true
  secretsDetection: true
  dependencyCache: true
  artifactCompression: true

# Environment-specific overrides
environments:
  development:
    security:
      scanners:
        vulnerabilities:
          thresholds:
            critical: 0
            high: 5
  staging:
    testing:
      performance:
        enabled: false
  production:
    monitoring:
      tracing:
        enabled: true
