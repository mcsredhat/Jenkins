pipeline {
    agent any
    
    environment {
        DOCKER_HUB_CREDENTIALS = credentials('docker-hub-credentials')
        PROJECT_NAME = "php-mysql-test-${BUILD_NUMBER}"
        COMPOSE_PROJECT_NAME = "${PROJECT_NAME}"
        EMAIL_CONFIGURED = 'false' // Set to 'true' when email is configured
        
        // Docker compose command - this fixes the composeCmd error
        COMPOSE_CMD = 'docker compose'
    }
    
    stages {
        stage('Checkout') {
            steps {
                echo 'Checking out source code...'
                checkout scm
            }
        }
        
        stage('Build Images') {
            steps {
                echo 'Building Docker images...'
                script {
                    dir('php_mysql_app') {
                        // Build images with proper error handling
                        sh """
                            ${COMPOSE_CMD} build --no-cache
                        """
                    }
                }
            }
        }
        
        stage('Create Test Environment') {
            steps {
                echo 'Creating test environment configuration...'
                script {
                    dir('php_mysql_app') {
                        // Create test environment file
                        sh '''
                            cat > .env.test << EOF
MYSQL_ROOT_PASSWORD=test_rootpass
MYSQL_DATABASE=test_db
MYSQL_USER=test_user
MYSQL_PASSWORD=test_password
PHP_APP_ENV=test
COMPOSE_PROJECT_NAME=${PROJECT_NAME}
EOF
                        '''
                    }
                }
            }
        }
        
        stage('Integration Tests') {
            steps {
                echo 'Starting integration tests...'
                script {
                    dir('php_mysql_app') {
                        try {
                            // Clean up any existing containers
                            sh """
                                ${COMPOSE_CMD} -p ${PROJECT_NAME} down -v --remove-orphans || true
                                docker system prune -f --volumes --filter "label=com.docker.compose.project=${PROJECT_NAME}" || true
                            """
                            
                            // Start services with better logging
                            sh """
                                ${COMPOSE_CMD} --env-file .env.test -p ${PROJECT_NAME} up -d
                            """
                            
                            echo 'Services started, waiting for MySQL to be ready...'
                            
                            // Better health check with more detailed logging
                            script {
                                def maxAttempts = 30
                                def attempt = 0
                                def mysqlReady = false
                                
                                while (attempt < maxAttempts && !mysqlReady) {
                                    attempt++
                                    echo "MySQL health check attempt ${attempt}/${maxAttempts}"
                                    
                                    try {
                                        // Check if container is running
                                        def containerStatus = sh(
                                            script: "${COMPOSE_CMD} -p ${PROJECT_NAME} ps mysql-db --format json",
                                            returnStdout: true
                                        ).trim()
                                        
                                        echo "Container status: ${containerStatus}"
                                        
                                        // Try to connect to MySQL
                                        sh """
                                            ${COMPOSE_CMD} -p ${PROJECT_NAME} exec -T mysql-db mysqladmin ping \
                                                -h localhost -u root --password=test_rootpass \
                                                --connect-timeout=3 --silent
                                        """
                                        
                                        mysqlReady = true
                                        echo "MySQL is ready!"
                                        
                                    } catch (Exception e) {
                                        echo "Attempt ${attempt} failed: ${e.getMessage()}"
                                        
                                        if (attempt % 5 == 0) {
                                            echo "Getting container logs for diagnosis..."
                                            sh """
                                                echo "=== MySQL Container Logs ==="
                                                ${COMPOSE_CMD} -p ${PROJECT_NAME} logs mysql-db --tail=50 || true
                                                echo "=== Container Status ==="
                                                ${COMPOSE_CMD} -p ${PROJECT_NAME} ps || true
                                                echo "=== System Resources ==="
                                                df -h || true
                                                free -m || true
                                            """
                                        }
                                        
                                        sleep 5
                                    }
                                }
                                
                                if (!mysqlReady) {
                                    echo "MySQL failed to become ready after ${maxAttempts} attempts"
                                    // Get final logs before failing
                                    sh """
                                        echo "=== Final MySQL Container Logs ==="
                                        ${COMPOSE_CMD} -p ${PROJECT_NAME} logs mysql-db || true
                                        echo "=== Final Container Status ==="
                                        ${COMPOSE_CMD} -p ${PROJECT_NAME} ps || true
                                    """
                                    error("MySQL container failed to start properly")
                                }
                            }
                            
                            // Run database initialization if needed
                            echo 'Initializing database...'
                            sh """
                                # Create test database and tables if they don't exist
                                ${COMPOSE_CMD} -p ${PROJECT_NAME} exec -T mysql-db mysql \
                                    -u root --password=test_rootpass \
                                    -e "CREATE DATABASE IF NOT EXISTS test_db; SHOW DATABASES;"
                            """
                            
                            // Test PHP-MySQL connection
                            echo 'Testing PHP-MySQL connection...'
                            sh """
                                # Wait a bit more for PHP container to be fully ready
                                sleep 5
                                
                                # Test if PHP container can connect to MySQL
                                ${COMPOSE_CMD} -p ${PROJECT_NAME} exec -T my_php_apache php -r "
                                \\$host = 'mysql-db';
                                \\$username = 'root';
                                \\$password = 'test_rootpass';
                                \\$database = 'test_db';
                                
                                try {
                                    \\$pdo = new PDO(\\\"mysql:host=\\$host;dbname=\\$database\\\", \\$username, \\$password);
                                    \\$pdo->setAttribute(PDO::ATTR_ERRMODE, PDO::ERRMODE_EXCEPTION);
                                    echo 'Database connection successful!' . PHP_EOL;
                                    
                                    // Test a simple query
                                    \\$stmt = \\$pdo->query('SELECT VERSION() as version');
                                    \\$version = \\$stmt->fetch(PDO::FETCH_ASSOC);
                                    echo 'MySQL Version: ' . \\$version['version'] . PHP_EOL;
                                    
                                } catch (PDOException \\$e) {
                                    echo 'Connection failed: ' . \\$e->getMessage() . PHP_EOL;
                                    exit(1);
                                }
                                "
                            """
                            
                            // Run any additional application tests
                            echo 'Running application tests...'
                            sh """
                                # Test web server response
                                ${COMPOSE_CMD} -p ${PROJECT_NAME} exec -T my_php_apache curl -f http://localhost/ || true
                                
                                # You can add more specific tests here
                                echo 'All tests completed successfully!'
                            """
                            
                        } catch (Exception e) {
                            echo "Integration tests failed: ${e.getMessage()}"
                            
                            // Capture logs for debugging
                            sh """
                                echo "=== Debugging Information ==="
                                ${COMPOSE_CMD} -p ${PROJECT_NAME} logs || true
                                ${COMPOSE_CMD} -p ${PROJECT_NAME} ps || true
                                docker ps -a || true
                            """
                            
                            throw e
                        }
                    }
                }
            }
            
            post {
                always {
                    script {
                        dir('php_mysql_app') {
                            // Always clean up test environment
                            sh """
                                echo 'Cleaning up test environment...'
                                ${COMPOSE_CMD} -p ${PROJECT_NAME} logs --tail=50 > test-logs.txt || true
                                ${COMPOSE_CMD} -p ${PROJECT_NAME} down -v --remove-orphans || true
                                docker system prune -f --volumes --filter "label=com.docker.compose.project=${PROJECT_NAME}" || true
                            """
                            
                            // Archive test logs
                            archiveArtifacts artifacts: 'test-logs.txt', fingerprint: true, allowEmptyArchive: true
                        }
                    }
                }
            }
        }
        
        stage('Security Scan') {
            when {
                expression { currentBuild.currentResult != 'FAILURE' }
            }
            steps {
                echo 'Running security scans...'
                script {
                    dir('php_mysql_app') {
                        // Add your security scanning tools here
                        sh """
                            echo 'Security scan would run here'
                            # Example: docker run --rm -v \$(pwd):/app clair-scanner:latest scan image_name
                        """
                    }
                }
            }
        }
        
        stage('Push to Docker Hub') {
            when {
                anyOf {
                    branch 'main'
                    branch 'master'
                    branch 'develop'
                }
                expression { currentBuild.currentResult != 'FAILURE' }
            }
            steps {
                echo 'Pushing images to Docker Hub...'
                script {
                    dir('php_mysql_app') {
                        // Login to Docker Hub
                        sh 'echo $DOCKER_HUB_CREDENTIALS_PSW | docker login -u $DOCKER_HUB_CREDENTIALS_USR --password-stdin'
                        
                        // Tag and push images
                        sh """
                            # Tag images with build number and latest
                            docker tag php-mysql-app_my_php_apache:latest your-dockerhub-username/php-mysql-app:${BUILD_NUMBER}
                            docker tag php-mysql-app_my_php_apache:latest your-dockerhub-username/php-mysql-app:latest
                            
                            # Push images
                            docker push your-dockerhub-username/php-mysql-app:${BUILD_NUMBER}
                            docker push your-dockerhub-username/php-mysql-app:latest
                        """
                    }
                }
            }
            post {
                always {
                    sh 'docker logout'
                }
            }
        }
        
        stage('Deploy to Staging') {
            when {
                branch 'develop'
                expression { currentBuild.currentResult != 'FAILURE' }
            }
            steps {
                echo 'Deploying to staging environment...'
                script {
                    dir('php_mysql_app') {
                        // Create staging environment file
                        sh '''
                            cat > .env.staging << EOF
MYSQL_ROOT_PASSWORD=staging_rootpass
MYSQL_DATABASE=staging_db
MYSQL_USER=staging_user
MYSQL_PASSWORD=staging_password
PHP_APP_ENV=staging
EOF
                        '''
                        
                        // Deploy to staging
                        sh """
                            # Add your staging deployment logic here
                            echo 'Deploying to staging...'
                        """
                    }
                }
            }
        }
        
        stage('Deploy to Production') {
            when {
                anyOf {
                    branch 'main'
                    branch 'master'
                }
                expression { currentBuild.currentResult != 'FAILURE' }
            }
            steps {
                echo 'Deploying to production environment...'
                script {
                    // Add manual approval for production deployments
                    input message: 'Deploy to production?', ok: 'Deploy',
                          submitterParameter: 'DEPLOYER'
                    
                    dir('php_mysql_app') {
                        // Create production environment file
                        sh '''
                            cat > .env.production << EOF
MYSQL_ROOT_PASSWORD=production_rootpass
MYSQL_DATABASE=production_db
MYSQL_USER=production_user
MYSQL_PASSWORD=production_password
PHP_APP_ENV=production
EOF
                        '''
                        
                        // Deploy to production
                        sh """
                            # Add your production deployment logic here
                            echo 'Deploying to production...'
                        """
                    }
                }
            }
        }
    }
    
    post {
        always {
            echo 'Cleaning up...'
            script {
                dir('php_mysql_app') {
                    // Final cleanup
                    sh """
                        ${COMPOSE_CMD} -p ${PROJECT_NAME} down -v --remove-orphans || true
                        docker system prune -f --filter until=24h || true
                        rm -f .env.test .env.staging .env.production || true
                    """
                }
            }
        }
        
        success {
            echo 'Pipeline completed successfully!'
            script {
                if (env.EMAIL_CONFIGURED == 'true') {
                    emailext (
                        subject: "SUCCESS: Job '${env.JOB_NAME} [${env.BUILD_NUMBER}]'",
                        body: """<p>SUCCESSFUL: Job '${env.JOB_NAME} [${env.BUILD_NUMBER}]':</p>
                                <p>Check console output at &QUOT;<a href='${env.BUILD_URL}'>${env.JOB_NAME} [${env.BUILD_NUMBER}]</a>&QUOT;</p>""",
                        to: "${env.CHANGE_AUTHOR_EMAIL}"
                    )
                } else {
                    echo 'Email notification skipped - EMAIL_CONFIGURED not set to true'
                }
            }
        }
        
        failure {
            echo 'Pipeline failed!'
            script {
                if (env.EMAIL_CONFIGURED == 'true') {
                    emailext (
                        subject: "FAILED: Job '${env.JOB_NAME} [${env.BUILD_NUMBER}]'",
                        body: """<p>FAILED: Job '${env.JOB_NAME} [${env.BUILD_NUMBER}]':</p>
                                <p>Check console output at &QUOT;<a href='${env.BUILD_URL}'>${env.JOB_NAME} [${env.BUILD_NUMBER}]</a>&QUOT;</p>""",
                        to: "${env.CHANGE_AUTHOR_EMAIL}"
                    )
                } else {
                    echo 'Email notification skipped - EMAIL_CONFIGURED not set to true'
                }
            }
        }
        
        unstable {
            echo 'Pipeline is unstable!'
        }
        
        changed {
            echo 'Pipeline state changed!'
        }
    }
}
