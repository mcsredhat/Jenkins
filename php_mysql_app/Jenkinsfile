pipeline {
    agent any

    environment {
        DI apologize, but it seems you haven't provided the complete `Jenkinsfile` content. The provided snippet is already corrected for the `node` block issue at line 440. Here's the relevant section of the `Jenkinsfile` with the update to the `deployToEnvironment` function to ensure consistency with the MySQL user configuration.

### Updated Section: `deployToEnvironment` Function
```groovy
def deployToEnvironment(environment, phpPort, mysqlPort, adminerPort) {
    def projectName = "php-mysql-app-${environment}"
    def composeCmd = sh(
        script: "docker compose version >/dev/null 2>&1 && echo 'docker compose' || echo 'docker-compose'",
        returnStdout: true
    ).trim()
    
    try {
        echo "Deploying PHP-MySQL application to ${environment}"
        echo "PHP Port: ${phpPort}, MySQL Port: ${mysqlPort}, Adminer Port: ${adminerPort}"
        
        sh """
            cp .env .env.${environment}
            
            sed -i 's/MYSQL_ROOT_PASSWORD=.*/MYSQL_ROOT_PASSWORD=rootpass_${environment}/' .env.${environment}
            sed -i 's/MYSQL_DATABASE=.*/MYSQL_DATABASE=mydb_${environment}/' .env.${environment}
            sed -i 's/MYSQL_USER=.*/MYSQL_USER=appuser_${environment}/' .env.${environment}
            sed -i 's/MYSQL_PASSWORD=.*/MYSQL_PASSWORD=MyAppUserPass456_${environment}/' .env.${environment}
            sed -i 's/PHP_EXTERNAL_PORT=.*/PHP_EXTERNAL_PORT=${phpPort}/' .env.${environment}
            sed -i 's/MYSQL_EXTERNAL_PORT=.*/MYSQL_EXTERNAL_PORT=${mysqlPort}/' .env.${environment}
            sed -i 's/ADMINER_EXTERNAL_PORT=.*/ADMINER_EXTERNAL_PORT=${adminerPort}/' .env.${environment}
            sed -i 's/PHP_ENV=.*/PHP_ENV=${environment}/' .env.${environment}
            sed -i 's/MYSQL_APP_ENV=.*/MYSQL_APP_ENV=${environment}/' .env.${environment}
            sed -i 's/NETWORK_SUBNET=.*/NETWORK_SUBNET=172.18.${environment == 'staging' ? '19' : '20'}.0/24/' .env.${environment}
            echo 'MYSQL_HOST=mysql-db' >> .env.${environment}
            
            echo "Environment-specific .env file created for ${environment}:"
            cat .env.${environment}
        """
        
        sh """
            # Stop and remove any containers using the network
            docker ps -a --filter "network=php-mysql-app-${environment}_web-app-net" -q | xargs -r docker stop || true
            docker ps -a --filter "network=php-mysql-app-${environment}_web-app-net" -q | xargs -r docker rm || true
            # Remove existing networks to avoid conflicts
            docker network ls --filter name=php-mysql-app-${environment} -q | xargs -r docker network rm 2>/dev/null || echo "No conflicting networks to remove"
            docker compose -p ${projectName} --env-file .env.${environment} down -v || true
            # Clean up unused networks
            docker network prune -f || true
        """
        
        sh """
            COMPOSE_PROJECT_NAME=${projectName} ${composeCmd} --env-file .env.${environment} up -d --build 2>&1 | tee deploy.log
            if [ \${PIPESTATUS[0]} -ne 0 ]; then
                echo "Docker Compose deployment failed, displaying deploy log:"
                cat deploy.log
                exit 1
            fi
        """
        
        echo "Waiting for deployment to stabilize..."
        sleep 90
        
        echo "Checking deployment health..."
        retry(15) {
            sleep(10)
            sh """
                # Verify MySQL is running
                COMPOSE_PROJECT_NAME=${projectName} ${composeCmd} --env-file .env.${environment} exec -T mysql-db mysqladmin ping -h mysql-db -u root --password=rootpass_${environment} --connect-timeout=5 || exit 1
                
                # Verify MySQL user creation
                COMPOSE_PROJECT_NAME=${projectName} ${composeCmd} --env-file .env.${environment} exec -T mysql-db mysql -uroot -prootpass_${environment} -h mysql-db -e "SELECT User, Host FROM mysql.user WHERE User='appuser_${environment}';" || {
                    echo "User 'appuser_${environment}' not found. Dumping MySQL user info:"
                    COMPOSE_PROJECT_NAME=${projectName} ${composeCmd} --env-file .env.${environment} exec -T mysql-db mysql -uroot -prootpass_${environment} -h mysql-db -e "SELECT User, Host, authentication_string FROM mysql.user;"
                    exit 1
                }
                
                # Test connection with application user
                COMPOSE_PROJECT_NAME=${projectName} ${composeCmd} --env-file .env.${environment} exec -T mysql-db mysql -uappuser_${environment} -pMyAppUserPass456_${environment} -h mysql-db -e "USE mydb_${environment}; SELECT 1;" || {
                    echo "Failed to connect with appuser_${environment}. Dumping MySQL user info:"
                    COMPOSE_PROJECT_NAME=${projectName} ${composeCmd} --env-file .env.${environment} exec -T mysql-db mysql -uroot -prootpass_${environment} -h mysql-db -e "SELECT User, Host, authentication_string FROM mysql.user;"
                    exit 1
                }
                
                # Verify PHP application connectivity
                curl -f http://localhost:${phpPort}/ || {
                    echo "PHP application test failed. Dumping container logs:"
                    COMPOSE_PROJECT_NAME=${projectName} ${composeCmd} --env-file .env.${environment} logs php-apache
                    echo "PHP application source code:"
                    COMPOSE_PROJECT_NAME=${projectName} ${composeCmd} --env-file .env.${environment} exec -T php-apache cat /var/www/html/index.php || echo "index.php not found"
                    exit 1
                }
                curl -f http://localhost:${adminerPort}/ || {
                    echo "Adminer interface test failed. Dumping container logs:"
                    COMPOSE_PROJECT_NAME=${projectName} ${composeCmd} --env-file .env.${environment} logs adminer
                    exit 1
                }
                echo "=== Service Status ==="
                COMPOSE_PROJECT_NAME=${projectName} ${composeCmd} --env-file .env.${environment} ps
            """
        }
        
        echo "Successfully deployed to ${environment}"
        echo "PHP Application: http://localhost:${phpPort}"
        echo "Adminer: http://localhost:${adminerPort}"
        echo "MySQL Connection: mysql -h127.0.0.1 -P${mysqlPort} -uroot -prootpass_${environment}"
        
    } catch (Exception e) {
        echo "Deployment to ${environment} failed: ${e.getMessage()}"
        sh """
            echo "=== Service Logs ==="
            COMPOSE_PROJECT_NAME=${projectName} ${composeCmd} --env-file .env.${environment} logs || echo "No logs available"
            echo "=== Service Status ==="
            COMPOSE_PROJECT_NAME=${projectName} ${composeCmd} --env-file .env.${environment} ps
            echo "=== Existing Docker Networks ==="
            docker network ls
            docker network ls --format '{{.Name}} {{.ID}}' | while read -r name id; do
                echo "Network: \$name, ID: \$id"
                docker network inspect \$id || echo "Failed to inspect network \$name"
            done
            echo "=== MySQL User Info ==="
            COMPOSE_PROJECT_NAME=${projectName} ${composeCmd} --env-file .env.${environment} exec -T mysql-db mysql -uroot -prootpass_${environment} -h mysql-db -e "SELECT User, Host, authentication_string FROM mysql.user;" || echo "Could not retrieve MySQL user info"
            echo "=== PHP Application Files ==="
            COMPOSE_PROJECT_NAME=${projectName} ${composeCmd} --env-file .env.${environment} exec -T php-apache ls -la /var/www/html || echo "Could not list PHP application files"
            echo "=== PHP Application Source ==="
            COMPOSE_PROJECT_NAME=${projectName} ${composeCmd} --env-file .env.${environment} exec -T php-apache cat /var/www/html/index.php || echo "index.php not found"
        """
        throw e
    }
}
```

**Changes**:
- Updated `MYSQL_USER` in the `deployToEnvironment` function from `sqluser_${environment}` to `appuser_${environment}` to match `init.sql` and `.env`.
- Updated health check commands to use `appuser_${environment}` instead of `sqluser_${environment}`.

#### 4. Remove Redundant `.env` Files
- Delete `mysql/.env` and `php-apache/.env` to avoid confusion, as the root `php_mysql_app/.env` contains all necessary variables.
- Ensure all references in `docker-compose.yml`, `Dockerfile`s, and `Jenkinsfile` use the root `.env`.

#### 5. Clean Up Dockerfiles
Remove commented `COPY` commands in `mysql/Dockerfile` and `php-apache/Dockerfile`.

<xaiArtifact artifact_id="a5f8dc93-562a-428d-9fb4-bfa8ef47685c" artifact_version_id="a2396b62-23f3-4bfc-a70e-06bc210c8445" title="php_mysql_app/mysql/Dockerfile" contentType="text/dockerfile">
```dockerfile
# Base image - corrected to use official MySQL image
FROM mysql:8.0

# Build-time variables
ARG MYSQL_VERSION=8.0
ARG MYSQL_USER_ID=1010
ARG MYSQL_USER_NAME=sqluser
ARG MYSQL_GROUP_ID=1010
ARG MYSQL_GROUP_NAME=sqlgroup
ARG MYSQL_APP_PORT=3306
ARG MYSQL_APP_ENV=production
ARG MYSQL_BASH_SHELL=/bin/bash
ARG MYSQL_APP_DIR=/sqldb
ARG MYSQL_MOUNT1=/sqldb/data
ARG MYSQL_MOUNT2=/sqldb/logs
ARG MYSQL_ROOT_PASSWORD=rootpass123!@#
ARG MYSQL_DATABASE=myappdb
ARG MYSQL_PASSWORD=MyAppUserPass456!@#
ARG MYSQL_USER=appuser
ARG CP_SQL_CFG=mysql/config
ARG TZ=Europe/Paris
ARG MYSQL_CHARSET=utf8mb4
ARG MYSQL_COLLATION=utf8mb4_unicode_ci
ARG MYSQL_LOWER_CASE_TABLE_NAMES=1
ARG MYSQL_MAX_CONNECTIONS=151
ARG MYSQL_INNODB_BUFFER_POOL_SIZE=256M

# Set runtime environment variables from ARGs
ENV MYSQL_VERSION=${MYSQL_VERSION} \
    USER_ID=${MYSQL_USER_ID} \
    USER_NAME=${MYSQL_USER_NAME} \
    GROUP_ID=${MYSQL_GROUP_ID} \
    GROUP_NAME=${MYSQL_GROUP_NAME} \
    APP_PORT=${MYSQL_APP_PORT} \
    APP_ENV=${MYSQL_APP_ENV} \
    BASH_SHELL=${MYSQL_BASH_SHELL} \
    APP_DIR=${MYSQL_APP_DIR} \
    MOUNT1=${MYSQL_MOUNT1} \
    MOUNT2=${MYSQL_MOUNT2} \
    MYSQL_ROOT_PASSWORD=${MYSQL_ROOT_PASSWORD} \
    MYSQL_DATABASE=${MYSQL_DATABASE} \
    MYSQL_PASSWORD=${MYSQL_PASSWORD} \
    MYSQL_USER=${MYSQL_USER} \
    CP_SQL_CFG=${CP_SQL_CFG} \
    TZ=${TZ} \
    MYSQL_CHARSET=${MYSQL_CHARSET} \
    MYSQL_COLLATION=${MYSQL_COLLATION} \
    MYSQL_LOWER_CASE_TABLE_NAMES=${MYSQL_LOWER_CASE_TABLE_NAMES} \
    MYSQL_MAX_CONNECTIONS=${MYSQL_MAX_CONNECTIONS} \
    MYSQL_INNODB_BUFFER_POOL_SIZE=${MYSQL_INNODB_BUFFER_POOL_SIZE}

# Labels
LABEL maintainer="farajassulai@gmail.com"
LABEL environment=${MYSQL_APP_ENV}
LABEL description="MySQL database server with custom sqluser and configuration"
LABEL date-created="2025-07-18"
LABEL version=${MYSQL_VERSION}

# Set working directory
WORKDIR ${APP_DIR}

# Create necessary directories, user, group and set permissions
RUN groupadd -g ${GROUP_ID} ${GROUP_NAME} && \
    useradd -u ${USER_ID} -g ${GROUP_NAME} -m -s /bin/bash ${USER_NAME} && \
    mkdir -p ${APP_DIR} ${MOUNT1} ${MOUNT2} /etc/mysql/conf.d  && \
    chown -R ${USER_NAME}:${GROUP_NAME} ${APP_DIR} ${MOUNT1} ${MOUNT2} && \
    chmod 755 ${APP_DIR} ${MOUNT1} ${MOUNT2}

# Copy MySQL configuration files
COPY mysql/config/my.cnf /etc/mysql/conf.d/custom.cnf
COPY mysql/config/init.sql /docker-entrypoint-initdb.d/

# Set proper permissions for config files
RUN chown ${USER_NAME}:${GROUP_NAME} /etc/mysql/conf.d/custom.cnf && \
    chmod 644 /etc/mysql/conf.d/custom.cnf && \
    chown ${USER_NAME}:${GROUP_NAME} /docker-entrypoint-initdb.d/init.sql && \
    chmod 644 /docker-entrypoint-initdb.d/init.sql

# Create volume mount points
VOLUME ["${MOUNT1}", "${MOUNT2}", "/var/lib/mysql"]

# Set shell
SHELL ["/bin/bash", "-o", "pipefail", "-c"]

# Switch to non-root user
USER ${USER_NAME}

# STOPSIGNAL
STOPSIGNAL SIGTERM

# Healthcheck
HEALTHCHECK --interval=30s \
    --timeout=15s \
    --start-period=30s \
    --retries=3 \
    CMD mysqladmin ping -h localhost -u root --password="$MYSQL_ROOT_PASSWORD" || exit 1

# Expose port
EXPOSE ${APP_PORT}

# Default command
CMD ["mysqld"]
```
