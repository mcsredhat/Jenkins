pipeline {
    agent any

    environment {
        // Docker Configuration
        DOCKER_REGISTRY = 'https://index.docker.io/v1/'
        DOCKER_USERNAME = 'farajassulai'
        DOCKER_REPO = 'react-app'
        IMAGE_NAME = "${DOCKER_USERNAME}/${DOCKER_REPO}"
        BUILD_TAG = "${env.BUILD_NUMBER}-${env.GIT_COMMIT?.take(7) ?: 'unknown'}"
        
        // Container Configuration
        CONTAINER_NAME = "react-app-${env.BUILD_NUMBER}"
        TEST_CONTAINER_NAME = "test-react-${env.BUILD_NUMBER}"
        APP_PORT = "80"
        TEST_PORT = "3001"
        STAGING_PORT = "3002"
        PRODUCTION_PORT = "3003"
        
        // GitHub Configuration
        GITHUB_REPO = 'https://github.com/mcsredhat/Jenkins'
        
        // Feature Toggles
        SKIP_SECURITY_SCAN = 'false'
        ENABLE_DOCKER_PUSH = 'true'
        ENABLE_STAGING_DEPLOY = 'true'
        ENABLE_PRODUCTION_DEPLOY = 'true'
        EMAIL_CONFIGURED = 'false'
        
        // Build Configuration
        NODE_ENV = 'production'
        CI = 'true'
    }

    stages {
        stage('Checkout & Setup') {
            steps {
                echo "üì¶ Checking out React application code..."
                checkout scm
                script {
                    // Display build information
                    echo """
                    üöÄ React Application Build Information:
                    ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
                    Branch: ${env.BRANCH_NAME ?: 'main'}
                    Commit: ${env.GIT_COMMIT ?: 'unknown'}
                    Build Tag: ${BUILD_TAG}
                    Image: ${IMAGE_NAME}:${BUILD_TAG}
                    Repository: ${GITHUB_REPO}
                    ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
                    """
                    
                    // Verify React project structure
                    echo "üîç Verifying React project structure..."
                    sh """
                        echo "Root directory contents:"
                        ls -la
                        
                        echo "Checking for React essentials:"
                        test -f package.json && echo "‚úÖ package.json found" || echo "‚ùå package.json missing"
                        test -f Dockerfile && echo "‚úÖ Dockerfile found" || echo "‚ùå Dockerfile missing"
                        test -d src && echo "‚úÖ src directory found" || echo "‚ùå src directory missing"
                        test -d public && echo "‚úÖ public directory found" || echo "‚ùå public directory missing"
                        
                        echo "Package.json contents:"
                        cat package.json | head -20
                    """
                } // Added missing closing brace for script block
            } // Added missing closing brace for steps block
        } // Added missing closing brace for stage block

        stage('Build React Application') {
            steps {
                echo "üîß Building React application with multi-stage Docker build..."
                script {
                    try {
                        // Build the complete multi-stage Docker image
                        echo "Building all stages: base -> dependencies -> build -> production"
                        
                        def buildStartTime = System.currentTimeMillis()
                        
                        // Build with build args for optimization
                        def image = docker.build(
                            "${IMAGE_NAME}:${BUILD_TAG}", 
                            """
                            --build-arg APP_NAME=react-app \
                            --build-arg APP_VERSION=${BUILD_TAG} \
                            --build-arg BUILD_ENV=production \
                            --build-arg NODE_ENV=production \
                            --target production \
                            .
                            """
                        )
                        
                        def buildEndTime = System.currentTimeMillis()
                        def buildDuration = (buildEndTime - buildStartTime) / 1000
                        
                        // Tag the image
                        image.tag("latest")
                        image.tag("jenkins-build-${env.BUILD_NUMBER}")
                        
                        echo "‚úÖ React application built successfully!"
                        echo "Build Duration: ${buildDuration} seconds"
                        echo "Image: ${IMAGE_NAME}:${BUILD_TAG}"
                        
                        // Display image information
                        sh """
                            echo "üìä Image Information:"
                            docker images ${IMAGE_NAME}:${BUILD_TAG}
                            
                            echo "üîç Image Layers:"
                            docker history ${IMAGE_NAME}:${BUILD_TAG} --no-trunc || true
                        """
                        
                    } catch (Exception e) {
                        echo "‚ùå React build failed: ${e.getMessage()}"
                        echo "üîç Docker build context:"
                        sh "ls -la"
                        throw e
                    }
                }
            }
        }

        stage('Test React Application') {
            steps {
                echo "üß™ Testing React application in container..."
                script {
                    try {
                        // Start test container
                        sh """
                            echo "Starting React test container..."
                            docker run -d --name ${TEST_CONTAINER_NAME} \
                                -p ${TEST_PORT}:${APP_PORT} \
                                -e NODE_ENV=production \
                                -e REACT_APP_ENV=test \
                                --health-cmd="curl -f http://localhost:${APP_PORT}/health || curl -f http://localhost:${APP_PORT}/ || exit 1" \
                                --health-interval=10s \
                                --health-timeout=5s \
                                --health-retries=3 \
                                ${IMAGE_NAME}:${BUILD_TAG}
                        """
    
                        echo "‚åõ Waiting for React application to start..."
                        sleep 15
    
                        // Wait for container to be healthy
                        echo "üîç Checking container health..."
                        retry(6) {
                            sleep 10
                            sh """
                                echo "Checking container status..."
                                docker ps | grep ${TEST_CONTAINER_NAME}
                                
                                echo "Testing application endpoints..."
                                # Try health endpoint first, then root
                                curl -f http://localhost:${TEST_PORT}/health || \
                                curl -f -I http://localhost:${TEST_PORT}/ || \
                                (echo "Both endpoints failed" && exit 1)
                            """
                        }
    
                        // Run comprehensive tests
                        echo "üîç Running comprehensive React application tests..."
                        sh """
                            echo "Testing React application responses..."
                            
                            # Test main page
                            response=\$(curl -s -o /dev/null -w "%{http_code}" http://localhost:${TEST_PORT}/)
                            echo "Root endpoint response: \$response"
                            [ "\$response" = "200" ] || echo "Warning: Root endpoint returned \$response"
                            
                            # Test static assets
                            curl -I http://localhost:${TEST_PORT}/static/ 2>/dev/null || echo "Static assets endpoint not available"
                            
                            # Check container logs for errors
                            echo "Container logs:"
                            docker logs ${TEST_CONTAINER_NAME} | tail -20
                            
                            # Verify nginx is serving React build
                            docker exec ${TEST_CONTAINER_NAME} ls -la /usr/share/nginx/html/ || echo "Could not list nginx html directory"
                        """
    
                        echo "‚úÖ All React application tests passed!"
                        
                    } catch (Exception e) {
                        echo "‚ùå React application tests failed: ${e.getMessage()}"
                        
                        // Debug information
                        sh """
                            echo "üîç Debugging information:"
                            docker ps -a | grep ${TEST_CONTAINER_NAME} || echo "Container not found"
                            docker logs ${TEST_CONTAINER_NAME} || echo "Could not retrieve logs"
                            docker inspect ${TEST_CONTAINER_NAME} || echo "Could not inspect container"
                        """
                        
                        throw e
                    } finally {
                        // Cleanup test container
                        sh """
                            docker stop ${TEST_CONTAINER_NAME} || true
                            docker rm ${TEST_CONTAINER_NAME} || true
                        """
                    }
                }
            }
        }

        stage('Security Scan') {
            when {
                not { environment name: 'SKIP_SECURITY_SCAN', value: 'true' }
            }
            steps {
                echo "üîç Running security scan on React application image..."
                script {
                    try {
                        // Check if Trivy is available
                        def trivyCheck = sh(
                            script: "docker run --rm aquasec/trivy:latest --version >/dev/null 2>&1",
                            returnStatus: true
                        )
                        
                        if (trivyCheck != 0) {
                            echo "‚ö†Ô∏è Trivy not available, skipping security scan"
                            currentBuild.result = 'UNSTABLE'
                            return
                        }
                        
                        echo "üìä Scanning React application for vulnerabilities..."
                        
                        // Run comprehensive security scan
                        sh """
                            echo "Running Trivy security scan..."
                            docker run --rm -v /var/run/docker.sock:/var/run/docker.sock \
                                aquasec/trivy:latest image \
                                --format table \
                                --severity LOW,MEDIUM,HIGH,CRITICAL \
                                --ignore-unfixed \
                                ${IMAGE_NAME}:${BUILD_TAG} || true
                        """
                        
                        // Check for critical vulnerabilities
                        def criticalVulns = sh(
                            script: """
                                docker run --rm -v /var/run/docker.sock:/var/run/docker.sock \
                                    aquasec/trivy:latest image \
                                    --exit-code 1 \
                                    --severity CRITICAL \
                                    --quiet \
                                    ${IMAGE_NAME}:${BUILD_TAG}
                            """,
                            returnStatus: true
                        )
                        
                        if (criticalVulns == 0) {
                            echo "‚úÖ No critical vulnerabilities found in React application"
                        } else {
                            echo "‚ö†Ô∏è Critical vulnerabilities detected - build marked as unstable"
                            currentBuild.result = 'UNSTABLE'
                        }
                        
                    } catch (Exception e) {
                        echo "‚ùå Security scan failed: ${e.getMessage()}"
                        echo "Continuing with build..."
                        currentBuild.result = 'UNSTABLE'
                    }
                }
            }
        }

        stage('Push to Registry') {
            when {
                anyOf {
                    branch 'main'
                    branch 'develop'
                    environment name: 'ENABLE_DOCKER_PUSH', value: 'true'
                }
            }
            steps {
                echo "üì§ Pushing React application image to Docker Hub..."
                script {
                    try {
                        docker.withRegistry("${DOCKER_REGISTRY}", 'dockerhub-credentials') {
                            def image = docker.image("${IMAGE_NAME}:${BUILD_TAG}")
                            
                            // Push build-specific tag
                            image.push()
                            image.push("latest")
                            
                            // Environment-specific tags
                            if (env.BRANCH_NAME == 'main') {
                                image.push("production")
                                image.push("stable")
                                echo "‚úÖ Production tags pushed"
                            } else if (env.BRANCH_NAME == 'develop') {
                                image.push("staging")
                                image.push("develop")
                                echo "‚úÖ Development tags pushed"
                            }
                            
                            echo "‚úÖ React application image pushed successfully to Docker Hub"
                            echo "üåê View on Docker Hub: https://hub.docker.com/r/${DOCKER_USERNAME}/${DOCKER_REPO}"
                        }
                        
                    } catch (Exception e) {
                        echo "‚ùå Docker Hub push failed: ${e.getMessage()}"
                        echo "üí° Ensure Docker Hub credentials are configured in Jenkins"
                        currentBuild.result = 'UNSTABLE'
                    }
                }
            }
        }

        stage('Deploy to Staging') {
            when {
                anyOf {
                    branch 'develop'
                    environment name: 'ENABLE_STAGING_DEPLOY', value: 'true'
                }
            }
            steps {
                echo "üöÄ Deploying React application to staging..."
                script {
                    deployReactApp('staging', STAGING_PORT)
                }
            }
        }

        stage('Production Deployment Approval') {
            when {
                anyOf {
                    branch 'main'
                    environment name: 'ENABLE_PRODUCTION_DEPLOY', value: 'true'
                }
            }
            steps {
                script {
                    try {
                        timeout(time: 10, unit: 'MINUTES') {
                            input message: 'üöÄ Deploy React application to production?', 
                                  ok: 'Deploy to Production',
                                  submitterParameter: 'APPROVER'
                        }
                        echo "Production deployment approved by: ${env.APPROVER ?: 'unknown'}"
                    } catch (Exception e) {
                        echo "‚ö†Ô∏è Production deployment not approved or timeout reached"
                        currentBuild.result = 'ABORTED'
                        return
                    }
                }
            }
        }

        stage('Deploy to Production') {
            when {
                anyOf {
                    branch 'main'
                    environment name: 'ENABLE_PRODUCTION_DEPLOY', value: 'true'
                }
            }
            steps {
                echo "üöÄ Deploying React application to production..."
                script {
                    deployReactApp('production', PRODUCTION_PORT)
                }
            }
        }
    }

    post {
        always {
            echo "üßπ Cleaning up build artifacts..."
            script {
                sh """
                    # Stop and remove any remaining test containers
                    docker stop ${TEST_CONTAINER_NAME} || true
                    docker rm ${TEST_CONTAINER_NAME} || true
                    
                    # Clean up old images (keep last 3 builds)
                    docker images ${IMAGE_NAME} --format "{{.Tag}}" | grep -E '^[0-9]+-[a-f0-9]{7}\$' | sort -V | head -n -3 | xargs -r -I {} docker rmi ${IMAGE_NAME}:{} || true
                    
                    # General cleanup
                    docker system prune -f --filter "until=24h" || true
                """
                
                // Archive build information
                writeFile file: 'build-info.txt', text: """
React Application Build Information
===================================
Build Number: ${env.BUILD_NUMBER}
Git Commit: ${env.GIT_COMMIT ?: 'unknown'}
Branch: ${env.BRANCH_NAME ?: 'main'}
Build Tag: ${BUILD_TAG}
Docker Image: ${IMAGE_NAME}:${BUILD_TAG}
Build Date: ${new Date()}
Jenkins URL: ${env.BUILD_URL}
Docker Hub: https://hub.docker.com/r/${DOCKER_USERNAME}/${DOCKER_REPO}
"""
                archiveArtifacts artifacts: 'build-info.txt', allowEmptyArchive: true
            }
        }

        success {
            echo "‚úÖ React application pipeline completed successfully!"
            script {
                if (env.EMAIL_CONFIGURED == 'true') {
                    try {
                        emailext(
                            subject: "‚úÖ React App Build Success: ${env.JOB_NAME} #${env.BUILD_NUMBER}",
                            body: """
                                üéâ React application build completed successfully!

                                üìã Build Details:
                                ‚îú‚îÄ Job: ${env.JOB_NAME}
                                ‚îú‚îÄ Build: #${env.BUILD_NUMBER}
                                ‚îú‚îÄ Branch: ${env.BRANCH_NAME ?: 'main'}
                                ‚îú‚îÄ Commit: ${env.GIT_COMMIT?.take(7) ?: 'unknown'}
                                ‚îî‚îÄ Image: ${IMAGE_NAME}:${BUILD_TAG}

                                üîó Links:
                                ‚îú‚îÄ Build URL: ${env.BUILD_URL}
                                ‚îú‚îÄ GitHub: ${GITHUB_REPO}
                                ‚îî‚îÄ Docker Hub: https://hub.docker.com/r/${DOCKER_USERNAME}/${DOCKER_REPO}

                                üöÄ Deployment URLs:
                                ‚îú‚îÄ Staging: http://localhost:${STAGING_PORT} (if deployed)
                                ‚îî‚îÄ Production: http://localhost:${PRODUCTION_PORT} (if deployed)
                            """,
                            recipientProviders: [developers()]
                        )
                    } catch (Exception e) {
                        echo "‚ö†Ô∏è Email notification failed: ${e.getMessage()}"
                    }
                }
            }
        }

        failure {
            echo "‚ùå React application pipeline failed!"
            script {
                if (env.EMAIL_CONFIGURED == 'true') {
                    try {
                        emailext(
                            subject: "‚ùå React App Build Failed: ${env.JOB_NAME} #${env.BUILD_NUMBER}",
                            body: """
                                ‚ùå React application build failed!

                                üìã Build Details:
                                ‚îú‚îÄ Job: ${env.JOB_NAME}
                                ‚îú‚îÄ Build: #${env.BUILD_NUMBER}
                                ‚îú‚îÄ Branch: ${env.BRANCH_NAME ?: 'main'}
                                ‚îî‚îÄ Commit: ${env.GIT_COMMIT?.take(7) ?: 'unknown'}

                                üîç Troubleshooting:
                                ‚îú‚îÄ Console Output: ${env.BUILD_URL}console
                                ‚îú‚îÄ Check Dockerfile syntax and build context
                                ‚îú‚îÄ Verify package.json and dependencies
                                ‚îî‚îÄ Ensure React build completes successfully

                                Please investigate and retry the build.
                            """,
                            recipientProviders: [developers(), requestor()]
                        )
                    } catch (Exception e) {
                        echo "‚ö†Ô∏è Email notification failed: ${e.getMessage()}"
                    }
                }
            }
        }

        unstable {
            echo "‚ö†Ô∏è React application pipeline completed with warnings."
        }
    }
}

// Helper function for React application deployment
def deployReactApp(environment, port) {
    def containerName = "react-app-${environment}"
    def deploymentStartTime = System.currentTimeMillis()
    
    try {
        echo "üöÄ Deploying React application to ${environment} environment on port ${port}"
        
        // Stop and remove existing container
        sh """
            docker stop ${containerName} || true
            docker rm ${containerName} || true
        """
        
        // Deploy new container
        sh """
            docker run -d \
                --name ${containerName} \
                -p ${port}:${APP_PORT} \
                -e NODE_ENV=production \
                -e REACT_APP_ENV=${environment} \
                -e ENVIRONMENT=${environment} \
                --restart=unless-stopped \
                --memory=512m \
                --cpus=1.0 \
                --health-cmd="curl -f http://localhost:${APP_PORT}/health || curl -f http://localhost:${APP_PORT}/ || exit 1" \
                --health-interval=30s \
                --health-timeout=10s \
                --health-retries=3 \
                --health-start-period=40s \
                ${IMAGE_NAME}:${BUILD_TAG}
        """

        echo "‚åõ Waiting for React application to stabilize in ${environment}..."
        sleep 20

        // Verify deployment
        echo "üîç Verifying React application deployment..."
        retry(5) {
            sh """
                echo "Testing React application health..."
                curl -f http://localhost:${port}/health || curl -f http://localhost:${port}/ || {
                    echo "Health check failed, checking container status..."
                    docker ps | grep ${containerName}
                    docker logs ${containerName} | tail -10
                    exit 1
                }
            """
            sleep 5
        }

        def deploymentEndTime = System.currentTimeMillis()
        def deploymentDuration = (deploymentEndTime - deploymentStartTime) / 1000

        echo "‚úÖ React application successfully deployed to ${environment}!"
        echo "Environment: ${environment}"
        echo "Port: ${port}"
        echo "Container: ${containerName}"
        echo "Duration: ${deploymentDuration} seconds"
        echo "URL: http://localhost:${port}"
        
        // Show deployment status
        sh """
            echo "üìä Deployment Status:"
            docker ps | grep ${containerName}
            echo "Container health:"
            docker inspect ${containerName} --format='{{.State.Health.Status}}' || echo "Health check not available"
        """
        
    } catch (Exception e) {
        echo "‚ùå Deployment to ${environment} failed: ${e.getMessage()}"
        
        // Debug information
        sh """
            echo "üîç Deployment debugging information:"
            docker ps -a | grep ${containerName} || echo "Container not found"
            docker logs ${containerName} || echo "No logs available"
            docker inspect ${containerName} || echo "Cannot inspect container"
        """
        
        throw e
    }
}
