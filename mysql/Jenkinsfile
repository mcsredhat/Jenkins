pipeline {
    agent any

    environment {
        DOCKER_REGISTRY = 'https://index.docker.io/v1/'
        DOCKER_USERNAME = 'farajassulai'
        DOCKER_REPO = 'mysql-db'
        IMAGE_NAME = "${DOCKER_USERNAME}/${DOCKER_REPO}"
        BUILD_TAG = "${env.BUILD_NUMBER}-${env.GIT_COMMIT?.take(7) ?: 'unknown'}"
        CONTAINER_NAME = "mysql-project"
        TEST_CONTAINER_NAME = "test-mysql-${env.BUILD_NUMBER}"
        GITHUB_REPO = 'https://github.com/mcsredhat/Jenkins'
        APP_PORT = "3306"
        TEST_PORT = "3366"
        APP_DIR = "mysql"
        SKIP_SECURITY_SCAN = 'false'
        ENABLE_DOCKER_PUSH = 'true'
        ENABLE_STAGING_DEPLOY = 'true'
        ENABLE_PRODUCTION_DEPLOY = 'true'
        FORCE_BRANCH_MAIN = 'true'
        FORCE_BRANCH_DEVELOP = 'false'
        EMAIL_CONFIGURED = 'false'
    }

    stages {
        stage('Checkout') {
            steps {
                echo "üì¶ Checking out code from GitHub repository..."
                checkout scm

                script {
                    echo "Current branch: ${env.BRANCH_NAME ?: 'main'}"
                    echo "Git commit: ${env.GIT_COMMIT ?: 'unknown'}"
                    echo "Repository URL: ${GITHUB_REPO}"
                    echo "Working in directory: ${pwd()}"
                    sh "ls -la"
                    echo "üê≥ Checking Docker environment..."
                    sh """
                        docker --version || echo "‚ö†Ô∏è Docker not found"
                        docker compose version 2>/dev/null && echo "‚úÖ Docker Compose (plugin) available" || echo "‚ö†Ô∏è Docker Compose plugin not found"
                        docker-compose --version 2>/dev/null && echo "‚úÖ Docker Compose (standalone) available" || echo "‚ö†Ô∏è Docker Compose standalone not found"
                    """
                    echo "Checking for application directory: ${APP_DIR}"
                    sh "ls -la ${APP_DIR}/ || echo 'Application directory not found'"
                    echo "Checking for required files in ${APP_DIR}:"
                    sh """
                        cd ${APP_DIR}
                        ls -la Dockerfile docker-compose.yml .env || echo 'Some files not found in ${APP_DIR}'
                        ls -la ./config/my.cnf ./config/init.sql || echo 'Config files not found in ${APP_DIR}/config'
                    """
                }
            }
        }

        stage('Setup Environment') {
            steps {
                echo "üîß Setting up environment..."
                script {
                    dir(APP_DIR) {
                        sh """
                            mkdir -p mysql_data mysql_logs
                            chmod 755 mysql_data mysql_logs
                        """
                        sh """
                            docker compose down 2>/dev/null || docker-compose down 2>/dev/null || echo "No compose services to stop"
                            docker container prune -f || true
                        """
                    }
                }
            }
        }

        stage('Build') {
            steps {
                echo "üîß Building Docker image..."
                script {
                    try {
                        dir(APP_DIR) {
                            def composeCmd = sh(
                                script: "docker compose version >/dev/null 2>&1 && echo 'docker compose' || echo 'docker-compose'",
                                returnStdout: true
                            ).trim()
                            echo "Using compose command: ${composeCmd}"
                            def buildResult = sh(
                                script: "${composeCmd} build 2>&1 || echo 'compose_failed'",
                                returnStdout: true
                            ).trim()
                            if (buildResult.contains('compose_failed')) {
                                echo "‚ö†Ô∏è Docker Compose not available, building manually..."
                                sh """
                                    docker build -t ${IMAGE_NAME}:${BUILD_TAG} . 2>&1 | tee build.log
                                    if [ \${PIPESTATUS[0]} -ne 0 ]; then
                                        echo "Docker build failed, displaying build log:"
                                        cat build.log
                                        exit 1
                                    fi
                                    docker tag ${IMAGE_NAME}:${BUILD_TAG} ${IMAGE_NAME}:latest
                                """
                            } else {
                                echo "‚úÖ Built with Docker Compose"
                                sh """
                                    COMPOSE_IMAGE=\$(docker images --format "table {{.Repository}}:{{.Tag}}" | grep mysql | head -1)
                                    if [ ! -z "\$COMPOSE_IMAGE" ]; then
                                        docker tag \$COMPOSE_IMAGE ${IMAGE_NAME}:${BUILD_TAG}
                                        docker tag \$COMPOSE_IMAGE ${IMAGE_NAME}:latest
                                    else
                                        echo "No compose image found, building manually..."
                                        docker build -t ${IMAGE_NAME}:${BUILD_TAG} . 2>&1 | tee build.log
                                        if [ \${PIPESTATUS[0]} -ne 0 ]; then
                                            echo "Docker build failed, displaying build log:"
                                            cat build.log
                                            exit 1
                                        fi
                                        docker tag ${IMAGE_NAME}:${BUILD_TAG} ${IMAGE_NAME}:latest
                                    fi
                                """
                            }
                            echo "‚úÖ Image built successfully: ${IMAGE_NAME}:${BUILD_TAG}"
                        }
                    } catch (Exception e) {
                        echo "‚ùå Build failed: ${e.getMessage()}"
                        sh "cat ${APP_DIR}/build.log || echo 'No build log available'"
                        throw e
                    }
                }
            }
        }

        stage('Test') {
            steps {
                echo "üß™ Running containerized tests..."
                script {
                    try {
                        dir(APP_DIR) {
                            sh """
                                docker ps -a --format '{{.Ports}}' | grep -q ":${TEST_PORT}->" && \
                                (echo "Port ${TEST_PORT} already in use" && exit 1) || true
                            """
                            sh """
                                docker inspect ${IMAGE_NAME}:${BUILD_TAG} >/dev/null 2>&1 || \
                                (echo "Image ${IMAGE_NAME}:${BUILD_TAG} not found" && exit 1)
                            """
                            sh """
                                docker stop ${TEST_CONTAINER_NAME} || true
                                docker rm ${TEST_CONTAINER_NAME} || true
                            """
                            sh """
                                docker run -d --name ${TEST_CONTAINER_NAME} -p ${TEST_PORT}:3306 \
                                -e MYSQL_ROOT_PASSWORD=rootpass \
                                -e MYSQL_DATABASE=testdb \
                                -e MYSQL_USER=testuser \
                                -e MYSQL_PASSWORD=testpass \
                                -v mysql_data:/var/lib/mysql \
                                -v mysql_logs:/var/log/mysql \
                                --health-cmd="mysqladmin ping -h localhost -u root --password=rootpass || exit 1" \
                                --health-interval=10s \
                                --health-timeout=10s \
                                --health-retries=15 \
                                --health-start-period=60s \
                                ${IMAGE_NAME}:${BUILD_TAG}
                            """
                            echo "‚åõ Waiting for MySQL to start..."
                            retry(25) {
                                sleep(10)
                                sh """
                                    if ! docker ps | grep -q ${TEST_CONTAINER_NAME}; then
                                        echo "Container not running, checking logs:"
                                        docker logs ${TEST_CONTAINER_NAME}
                                        exit 1
                                    fi
                                    HEALTH_STATUS=\$(docker inspect --format='{{.State.Health.Status}}' ${TEST_CONTAINER_NAME})
                                    if [ "\$HEALTH_STATUS" != "healthy" ]; then
                                        echo "Container not healthy, status: \$HEALTH_STATUS"
                                        docker logs ${TEST_CONTAINER_NAME}
                                        exit 1
                                    fi
                                    docker exec ${TEST_CONTAINER_NAME} mysqladmin ping -h 127.0.0.1 -P 3306 -u root --password=rootpass --connect-timeout=5
                                """
                            }
                            echo "‚úÖ MySQL is ready!"
                            echo "üîç Running MySQL tests..."
                            sh """
                                docker exec ${TEST_CONTAINER_NAME} mysql -uroot -prootpass -e "SHOW DATABASES;"
                                docker exec ${TEST_CONTAINER_NAME} mysql -uroot -prootpass -e "USE testdb; SHOW TABLES;"
                                docker exec ${TEST_CONTAINER_NAME} mysql -uroot -prootpass -e "USE testdb; CREATE TABLE test_table (id INT PRIMARY KEY, name VARCHAR(50));"
                                docker exec ${TEST_CONTAINER_NAME} mysql -uroot -prootpass -e "USE testdb; INSERT INTO test_table (id, name) VALUES (1, 'test');"
                                docker exec ${TEST_CONTAINER_NAME} mysql -uroot -prootpass -e "USE testdb; SELECT * FROM test_table;"
                                docker exec ${TEST_CONTAINER_NAME} mysql -utestuser -ptestpass -e "SHOW DATABASES;"
                            """
                            echo "‚úÖ All MySQL tests passed!"
                        }
                    } catch (Exception e) {
                        echo "‚ùå Test failed: ${e.getMessage()}"
                        sh "docker logs ${TEST_CONTAINER_NAME} || echo 'Could not retrieve logs'"
                        throw e
                    } finally {
                        sh """
                            docker stop ${TEST_CONTAINER_NAME} || true
                            docker rm ${TEST_CONTAINER_NAME} || true
                        """
                    }
                }
            }
        }

        stage('Security Scan') {
            when {
                anyOf {
                    environment name: 'SKIP_SECURITY_SCAN', value: 'false'
                    environment name: 'FORCE_SECURITY_SCAN', value: 'true'
                }
            }
            steps {
                echo "üîç Running security scan with Trivy..."
                script {
                    try {
                        def trivyAvailable = sh(
                            script: "docker run --rm aquasec/trivy:latest --version",
                            returnStatus: true
                        )
                        if (trivyAvailable != 0) {
                            echo "‚ö†Ô∏è Trivy not available, skipping security scan"
                            currentBuild.result = 'UNSTABLE'
                            return
                        }
                        echo "üìä Running comprehensive vulnerability scan..."
                        sh """
                            docker run --rm -v /var/run/docker.sock:/var/run/docker.sock \
                            aquasec/trivy:latest image \
                            --format table \
                            --severity LOW,MEDIUM,HIGH,CRITICAL \
                            ${IMAGE_NAME}:${BUILD_TAG} || true
                        """
                        echo "üö® Checking for CRITICAL vulnerabilities only..."
                        def criticalScanResult = sh(
                            script: """
                                docker run --rm -v /var/run/docker.sock:/var/run/docker.sock \
                                aquasec/trivy:latest image \
                                --exit-code 1 --severity CRITICAL \
                                --format table \
                                ${IMAGE_NAME}:${BUILD_TAG} || true
                            """,
                            returnStatus: true
                        )
                        if (criticalScanResult == 0) {
                            echo "‚úÖ No CRITICAL vulnerabilities found"
                        } else {
                            echo "‚ö†Ô∏è CRITICAL vulnerabilities found - marking build as unstable"
                            currentBuild.result = 'UNSTABLE'
                        }
                        echo "‚úÖ Security scan completed"
                    } catch (Exception e) {
                        echo "‚ùå Security scan failed: ${e.getMessage()}"
                        currentBuild.result = 'UNSTABLE'
                    }
                }
            }
        }

        stage('Push to Docker Hub') {
            when {
                anyOf {
                    branch 'main'
                    branch 'develop'
                    environment name: 'ENABLE_DOCKER_PUSH', value: 'true'
                    environment name: 'FORCE_BRANCH_MAIN', value: 'true'
                    environment name: 'FORCE_BRANCH_DEVELOP', value: 'true'
                }
            }
            steps {
                echo "üì§ Pushing image to Docker Hub..."
                script {
                    try {
                        try {
                            docker.withRegistry("${DOCKER_REGISTRY}", 'dockerhub-credentials') {
                                def image = docker.image("${IMAGE_NAME}:${BUILD_TAG}")
                                image.push()
                                image.push("jenkins-mysql-latest")
                                if (env.BRANCH_NAME == 'main' || env.FORCE_BRANCH_MAIN == 'true') {
                                    image.push("production")
                                    image.push("v1.0.0")
                                } else if (env.BRANCH_NAME == 'develop' || env.FORCE_BRANCH_DEVELOP == 'true') {
                                    image.push("staging")
                                    image.push("develop-latest")
                                }
                                echo "‚úÖ Image pushed successfully with credentials"
                            }
                        } catch (Exception credError) {
                            echo "‚ö†Ô∏è Docker Hub credentials not found, attempting push without registry authentication..."
                            sh """
                                docker push ${IMAGE_NAME}:${BUILD_TAG} || echo "Push failed - check Docker Hub login"
                                docker push ${IMAGE_NAME}:jenkins-mysql-latest || echo "Push failed - check Docker Hub login"
                            """
                            echo "‚úÖ Image push attempted (check Docker Hub for results)"
                        }
                    } catch (Exception e) {
                        echo "‚ùå Docker Hub push failed: ${e.getMessage()}"
                        echo "üí° To fix: Run 'docker login' on Jenkins agent or configure 'dockerhub-credentials'"
                        currentBuild.result = 'UNSTABLE'
                    }
                }
            }
        }

        stage('Deploy to Staging') {
            when {
                anyOf {
                    branch 'develop'
                    environment name: 'ENABLE_STAGING_DEPLOY', value: 'true'
                    environment name: 'FORCE_BRANCH_DEVELOP', value: 'true'
                }
            }
            steps {
                echo "üöÄ Deploying to staging..."
                script {
                    deployToEnvironment('staging', '3307')
                }
            }
        }

        stage('Deploy to Production') {
            when {
                anyOf {
                    branch 'main'
                    environment name: 'ENABLE_PRODUCTION_DEPLOY', value: 'true'
                    environment name: 'FORCE_BRANCH_MAIN', value: 'true'
                }
            }
            steps {
                script {
                    if (env.SKIP_PRODUCTION_APPROVAL != 'true') {
                        try {
                            timeout(time: 5, unit: 'MINUTES') {
                                input message: 'Deploy to production?', ok: 'Deploy'
                            }
                        } catch (Exception e) {
                            echo "‚ö†Ô∏è Production deployment approval timeout or skipped"
                            return
                        }
                    }
                    echo "üöÄ Deploying to production..."
                    deployToEnvironment('production', '3308')
                }
            }
        }
    }

    post {
        always {
            echo "üßπ Cleaning up..."
            script {
                sh """
                    docker stop ${TEST_CONTAINER_NAME} || true
                    docker rm ${TEST_CONTAINER_NAME} || true
                    docker system prune -f --filter "until=24h"
                """
            }
        }

        success {
            echo "‚úÖ Pipeline completed successfully!"
            script {
                try {
                    if (env.EMAIL_CONFIGURED == 'true') {
                        emailext(
                            subject: "‚úÖ MySQL Build Success: ${env.JOB_NAME} #${env.BUILD_NUMBER}",
                            body: """
                                ‚úîÔ∏è MySQL build succeeded!

                                Job: ${env.JOB_NAME}
                                Build Number: ${env.BUILD_NUMBER}
                                Branch: ${env.BRANCH_NAME ?: 'main'}
                                Image: ${IMAGE_NAME}:${BUILD_TAG}

                                GitHub: ${GITHUB_REPO}
                                Docker Hub: https://hub.docker.com/r/${DOCKER_USERNAME}/${DOCKER_REPO}
                                Build URL: ${env.BUILD_URL}
                            """,
                            recipientProviders: [developers()]
                        )
                    } else {
                        echo "Email notification skipped - EMAIL_CONFIGURED not set to true"
                    }
                } catch (Exception e) {
                    echo "‚ö†Ô∏è Failed to send success email: ${e.getMessage()}"
                }
            }
        }

        failure {
            echo "‚ùå Pipeline failed!"
            script {
                try {
                    if (env.EMAIL_CONFIGURED == 'true') {
                        emailext(
                            subject: "‚ùå MySQL Build Failed: ${env.JOB_NAME} #${env.BUILD_NUMBER}",
                            body: """
                                ‚ùå MySQL build failed!

                                Job: ${env.JOB_NAME}
                                Branch: ${env.BRANCH_NAME ?: 'main'}
                                Build URL: ${env.BUILD_URL}

                                Please check the console output for details:
                                ${env.BUILD_URL}console
                            """,
                            recipientProviders: [developers(), requestor()]
                        )
                    } else {
                        echo "Email notification skipped - EMAIL_CONFIGURED not set to true"
                    }
                } catch (Exception e) {
                    echo "‚ö†Ô∏è Failed to send failure email: ${e.getMessage()}"
                }
            }
        }

        unstable {
            echo "‚ö†Ô∏è Pipeline completed with warnings."
        }
    }
}

def deployToEnvironment(environment, port) {
    def containerName = "mysql-app-${environment}"
    try {
        echo "üöÄ Deploying ${IMAGE_NAME}:${BUILD_TAG} to ${environment} on port ${port}"
        sh """
            docker stop ${containerName} || true
            docker rm ${containerName} || true
            docker run -
