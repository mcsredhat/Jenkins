pipeline {
    agent any

    environment {
        DOCKER_REGISTRY = 'https://index.docker.io/v1/'
        DOCKER_USERNAME = 'farajassulai'
        DOCKER_REPO = 'angular-app'
        IMAGE_NAME = "${DOCKER_USERNAME}/${DOCKER_REPO}"
        BUILD_TAG = "${env.BUILD_NUMBER}-${env.GIT_COMMIT?.take(7) ?: 'unknown'}"
        CONTAINER_NAME = "angular-app-${env.BUILD_NUMBER}"
        TEST_CONTAINER_NAME = "test-angular-${env.BUILD_NUMBER}" 
        APP_PORT = "8088"
        TEST_PORT = "3000"
        STAGING_PORT = "3001"
        PRODUCTION_PORT = "3002"
        GITHUB_REPO = 'https://github.com/mcsredhat/Jenkins'
        SKIP_SECURITY_SCAN = 'false'
        ENABLE_DOCKER_PUSH = 'true'
        ENABLE_STAGING_DEPLOY = 'true'
        ENABLE_PRODUCTION_DEPLOY = 'true'
        EMAIL_CONFIGURED = 'false'
        NODE_ENV = 'production'
        CI = 'true'
        APP_DIR = 'angular-App'
        // ... other variables
        ANGULAR_VERSION = '20.0.4'
        NODE_VERSION = '22'
    }

    stages {
        stage('Checkout & Setup') {
            steps {
                echo "üì¶ Checking out Angular application code..."
                checkout scm
                dir("${APP_DIR}") {
                    script {
                        echo """
                        üöÄ Angular Application Build Information:
                        ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
                        Branch: ${env.BRANCH_NAME ?: 'main'}
                        Commit: ${env.GIT_COMMIT ?: 'unknown'}
                        Build Tag: ${BUILD_TAG}
                        Image: ${IMAGE_NAME}:${BUILD_TAG}
                        Repository: ${GITHUB_REPO}
                        ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
                        """
                        echo "üîç Verifying Angular project structure..."
                        sh """
                            echo "present working directory contents (angular-App/):"
                            pwd 
                            echo "Root directory contents (angular-App/):"
                            ls -la
                            echo "Checking for Angular essentials:"
                            test -f package.json && echo "‚úÖ package.json found" || { echo "‚ùå package.json missing"; exit 1; }
                            test -f angular.json && echo "‚úÖ package.json found" || { echo "‚ùå package.json missing"; exit 1; }
                            test -f Dockerfile && echo "‚úÖ Dockerfile found" || { echo "‚ùå Dockerfile missing"; exit 1; }
                            test -f Jenkinsile && echo "‚úÖ Dockerfile found" || { echo "‚ùå Jenkinsfile missing"; exit 1; }
                            test -d src && echo "‚úÖ src directory found" || echo "‚ùå src directory missing"
                            test -d dist && echo "‚úÖ public directory found" || echo "‚ùå public directory missing"
                            echo "Package.json contents:"
                            cat package.json | head -20 || echo "Could not read package.json"
                            echo "Listing src directory contents:"
                            ls -la src 2>/dev/null || echo "‚ö†Ô∏è src directory not found"
                            echo "Listing public directory contents:"
                            ls -la dist 2>/dev/null || echo "‚ö†Ô∏è public directory not found"
                            echo "Listing dist directory contents:"
                            ls -la dist/portfolio-project 2>/dev/null || echo "‚ö†Ô∏è dist directory not found (will be created during build)"
                            echo "Checking for Angular config files:"
                            ls -la nginx.conf 2>/dev/null || echo "No nginx config files found (will be created if needed)"
                        """
                    }
                }
            }
        }

        stage('Build Angular 20+ Application') {
            steps {
                echo "üîß Building Angular application with multi-stage Docker build..."
                dir("${APP_DIR}") {
                    script {
                        try {
                            echo "Building all stages: base -> dependencies -> build -> production"
                            def buildStartTime = System.currentTimeMillis()
                            def image = docker.build("${IMAGE_NAME}:${BUILD_TAG}", ".")
                            def buildEndTime = System.currentTimeMillis()
                            def buildDuration = (buildEndTime - buildStartTime) / 1000
                            image.tag("latest")
                            image.tag("jenkins-build-${env.BUILD_NUMBER}")
                            echo "‚úÖ Angular 20+ application built successfully!"
                            echo "Build Duration: ${buildDuration} seconds"
                            echo "Image: ${IMAGE_NAME}:${BUILD_TAG}"
                            sh """
                                echo "üìä Image Information:"
                                docker images ${IMAGE_NAME}:${BUILD_TAG}
                                echo "üîç Image Layers:"
                                docker history ${IMAGE_NAME}:${BUILD_TAG} --no-trunc | head -10 || true
                                echo "üìä Verifying Angular 20+ build:"
                                docker run --rm ${IMAGE_NAME}:${BUILD_TAG} ls -la /usr/share/nginx/html/
                                docker run --rm ${IMAGE_NAME}:${BUILD_TAG} test -f /usr/share/nginx/html/index.html || exit 1
                                echo "Angular 20+ build verification complete"
                            """
                        } catch (Exception e) {
                            echo "‚ùå Angular build failed: ${e.getMessage()}"
                            echo "üîç Docker build context:"
                            sh "ls -la"
                            throw e
                        }
                    } 
                }
            }
        }

        stage('Test Angular Application') {
    steps {
        echo "üß™ Testing Angular application in container..."
        dir("${APP_DIR}") {
            script {
                try {
                    // Start container with better error handling
                    sh """
                        echo "Starting Angular test container..."
                        docker run -d --name ${TEST_CONTAINER_NAME} \
                            -p ${TEST_PORT}:8088 \
                            --health-cmd="curl -f http://localhost:8088/health || exit 1" \
                            --health-interval=10s \
                            --health-timeout=5s \
                            --health-retries=3 \
                            ${IMAGE_NAME}:${BUILD_TAG}
                        
                        # Wait a moment for container to start
                        sleep 5
                        
                        # Check if container is running
                        if ! docker ps | grep -q ${TEST_CONTAINER_NAME}; then
                            echo "‚ùå Container failed to start"
                            docker logs ${TEST_CONTAINER_NAME}
                            exit 1
                        fi
                    """
                    
                    echo "‚åõ Waiting for Angular application to start..."
                    sleep 15
                    
                    // Rest of your testing logic...
                } catch (Exception e) {
                    echo "‚ùå Angular application tests failed: ${e.getMessage()}"
                    sh """
                        echo "üîç Debugging information:"
                        docker ps -a | grep ${TEST_CONTAINER_NAME} || echo "Container not found"
                        docker logs ${TEST_CONTAINER_NAME} || echo "Could not retrieve logs"
                        docker inspect ${TEST_CONTAINER_NAME} --format='{{.State.Status}}: {{.State.Error}}'
                    """
                    throw e
                } finally {
                    sh """
                        docker stop ${TEST_CONTAINER_NAME} || true
                        docker rm ${TEST_CONTAINER_NAME} || true
                    """
                }
            }
        }
    }
}

        stage('Security Scan') {
            when {
                not { environment name: 'SKIP_SECURITY_SCAN', value: 'true' }
            }
            steps {
                echo "üîç Running security scan on Angular application image..."
                script {
                    try {
                        def trivyCheck = sh(
                            script: "command -v trivy >/dev/null 2>&1 || docker run --rm aquasec/trivy:latest --version >/dev/null 2>&1",
                            returnStatus: true
                        )
                        if (trivyCheck != 0) {
                            echo "‚ö†Ô∏è Trivy not available, skipping security scan"
                            currentBuild.result = 'UNSTABLE'
                            return
                        }
                        echo "üìä Scanning Angular application for vulnerabilities..."
                        sh """
                            echo "Running Trivy security scan..."
                            docker run --rm -v /var/run/docker.sock:/var/run/docker.sock \
                                aquasec/trivy:latest image \
                                --format table \
                                --severity LOW,MEDIUM,HIGH,CRITICAL \
                                --ignore-unfixed \
                                ${IMAGE_NAME}:${BUILD_TAG} || true
                        """
                        def criticalVulns = sh(
                            script: """
                                docker run --rm -v /var/run/docker.sock:/var/run/docker.sock \
                                    aquasec/trivy:latest image \
                                    --exit-code 1 \
                                    --severity CRITICAL \
                                    --quiet \
                                    ${IMAGE_NAME}:${BUILD_TAG}
                            """,
                            returnStatus: true
                        )
                        if (criticalVulns == 0) {
                            echo "‚úÖ No critical vulnerabilities found in Angular application"
                        } else {
                            echo "‚ö†Ô∏è Critical vulnerabilities detected - build marked as unstable"
                            currentBuild.result = 'UNSTABLE'
                        }
                    } catch (Exception e) {
                        echo "‚ùå Security scan failed: ${e.getMessage()}"
                        echo "Continuing with build..."
                        currentBuild.result = 'UNSTABLE'
                    }
                }
            }
        }

        stage('Push to Registry') {
            when {
                anyOf {
                    branch 'main'
                    branch 'develop'
                    environment name: 'ENABLE_DOCKER_PUSH', value: 'true'
                }
            }
            steps {
                echo "üì§ Pushing Angular application image to Docker Hub..."
                script {
                    try {
                        docker.withRegistry("${DOCKER_REGISTRY}", 'dockerhub-credentials') {
                            def image = docker.image("${IMAGE_NAME}:${BUILD_TAG}")
                            image.push()
                            image.push("latest")
                            if (env.BRANCH_NAME == 'main') {
                                image.push("production")
                                image.push("stable")
                                echo "‚úÖ Production tags pushed"
                            } else if (env.BRANCH_NAME == 'develop') {
                                image.push("staging")
                                image.push("develop")
                                echo "‚úÖ Development tags pushed"
                            }
                            echo "‚úÖ Angular application image pushed successfully to Docker Hub"
                            echo "üåê View on Docker Hub: https://hub.docker.com/r/${DOCKER_USERNAME}/${DOCKER_REPO}"
                        }
                    } catch (Exception e) {
                        echo "‚ùå Docker Hub push failed: ${e.getMessage()}"
                        echo "üí° Ensure Docker Hub credentials are configured in Jenkins"
                        currentBuild.result = 'UNSTABLE'
                    }
                }
            }
        }

        stage('Deploy to Staging') {
            when {
                anyOf {
                    branch 'develop'
                    environment name: 'ENABLE_STAGING_DEPLOY', value: 'true'
                }
            }
            steps {
                echo "üöÄ Deploying Angular application to staging..."
                script {
                    deployangularApp('staging', STAGING_PORT)
                }
            }
        }

        stage('Production Deployment Approval') {
            when {
                anyOf {
                    branch 'main'
                    environment name: 'ENABLE_PRODUCTION_DEPLOY', value: 'true'
                }
            }
            steps {
                script {
                    try {
                        timeout(time: 10, unit: 'MINUTES') {
                            input message: 'üöÄ Deploy Angular application to production?', 
                                  ok: 'Deploy to Production',
                                  submitterParameter: 'APPROVER'
                        }
                        echo "Production deployment approved by: ${env.APPROVER ?: 'unknown'}"
                    } catch (Exception e) {
                        echo "‚ö†Ô∏è Production deployment not approved or timeout reached"
                        currentBuild.result = 'ABORTED'
                        return
                    }
                }
            }
        }

        stage('Deploy to Production') {
            when {
                anyOf {
                    branch 'main'
                    environment name: 'ENABLE_PRODUCTION_DEPLOY', value: 'true'
                }
            }
            steps {
                echo "üöÄ Deploying Angular application to production..."
                script {
                    deployangularApp('production', PRODUCTION_PORT)
                }
            }
        }
    }

    post {
        always {
            echo "üßπ Cleaning up build artifacts..."
            script {
                sh """
                    docker stop ${TEST_CONTAINER_NAME} || true
                    docker rm ${TEST_CONTAINER_NAME} || true
                    docker images ${IMAGE_NAME} --format "{{.Tag}}" | grep -E '^[0-9]+-[a-f0-9]{7}\$' | sort -V | head -n -3 | xargs -r -I {} docker rmi ${IMAGE_NAME}:{} || true
                    docker system prune -f --filter "until=24h" || true
                """
                writeFile file: 'build-info.txt', text: """
Angular Application Build Information
====================================
Build Number: ${env.BUILD_NUMBER}
Git Commit: ${env.GIT_COMMIT ?: 'unknown'}
Branch: ${env.BRANCH_NAME ?: 'main'}
Build Tag: ${BUILD_TAG}
Docker Image: ${IMAGE_NAME}:${BUILD_TAG}
Build Date: ${new Date()}
Jenkins URL: ${env.BUILD_URL}
Docker Hub: https://hub.docker.com/r/${DOCKER_USERNAME}/${DOCKER_REPO}
"""
                archiveArtifacts artifacts: 'build-info.txt', allowEmptyArchive: true
            }
        }

        success {
            echo "‚úÖ Angular application pipeline completed successfully!"
            script {
                if (env.EMAIL_CONFIGURED == 'true') {
                    try {
                        emailext(
                            subject: "‚úÖ Angular App Build Success: ${env.JOB_NAME} #${env.BUILD_NUMBER}",
                            body: """
                                üéâ Angular application build completed successfully!
                                üìã Build Details:
                                ‚îú‚îÄ Job: ${env.JOB_NAME}
                                ‚îú‚îÄ Build: #${env.BUILD_NUMBER}
                                ‚îú‚îÄ Branch: ${env.BRANCH_NAME ?: 'main'}
                                ‚îú‚îÄ Commit: ${env.GIT_COMMIT?.take(7) ?: 'unknown'}
                                ‚îî‚îÄ Image: ${IMAGE_NAME}:${BUILD_TAG}
                                üîó Links:
                                ‚îú‚îÄ Build URL: ${env.BUILD_URL}
                                ‚îú‚îÄ GitHub: ${GITHUB_REPO}
                                ‚îî‚îÄ Docker Hub: https://hub.docker.com/r/${DOCKER_USERNAME}/${DOCKER_REPO}
                                üöÄ Deployment URLs:
                                ‚îú‚îÄ Staging: http://localhost:${STAGING_PORT} (if deployed)
                                ‚îî‚îÄ Production: http://localhost:${PRODUCTION_PORT} (if deployed)
                            """,
                            recipientProviders: [developers()]
                        )
                    } catch (Exception e) {
                        echo "‚ö†Ô∏è Email notification failed: ${e.getMessage()}"
                    }
                }
            }
        }

        failure {
            echo "‚ùå Angular application pipeline failed!"
            script {
                if (env.EMAIL_CONFIGURED == 'true') {
                    try {
                        emailext(
                            subject: "‚ùå Angular App Build Failed: ${env.JOB_NAME} #${env.BUILD_NUMBER}",
                            body: """
                                ‚ùå Angular application build failed!
                                üìã Build Details:
                                ‚îú‚îÄ Job: ${env.JOB_NAME}
                                ‚îú‚îÄ Build: #${env.BUILD_NUMBER}
                                ‚îú‚îÄ Branch: ${env.BRANCH_NAME ?: 'main'}
                                ‚îî‚îÄ Commit: ${env.GIT_COMMIT?.take(7) ?: 'unknown'}
                                üîç Troubleshooting:
                                ‚îú‚îÄ Console Output: ${env.BUILD_URL}console
                                ‚îú‚îÄ Check Dockerfile syntax and build context
                                ‚îú‚îÄ Verify package.json and dependencies
                                ‚îî‚îÄ Ensure Angular build completes successfully
                                Please investigate and retry the build.
                            """,
                            recipientProviders: [developers(), requestor()]
                        )
                    } catch (Exception e) {
                        echo "‚ö†Ô∏è Email notification failed: ${e.getMessage()}"
                    }
                }
            }
        }

        unstable {
            echo "‚ö†Ô∏è Angular application pipeline completed with warnings."
        }
    }
}

def deployangularApp(environment, port) {
    def containerName = "angular-app-${environment}"
    def deploymentStartTime = System.currentTimeMillis()
    
    try {
        echo "üöÄ Deploying Angular application to ${environment} environment on port ${port}"
        sh """
            docker stop ${containerName} || true
            docker rm ${containerName} || true
        """
        sh """
            docker run -d \
                --name ${containerName} \
                -p ${port}:${APP_PORT} \
                -e NODE_ENV=production \
                -e angular_APP_ENV=${environment} \
                -e ENVIRONMENT=${environment} \
                --restart=unless-stopped \
                --memory=512m \
                --cpus=1.0 \
                --health-cmd="curl -f http://localhost:${APP_PORT}/health || curl -f http://localhost:${APP_PORT}/ || exit 1" \
                --health-interval=30s \
                --health-timeout=10s \
                --health-retries=3 \
                --health-start-period=40s \
                ${IMAGE_NAME}:${BUILD_TAG}
        """
        echo "‚åõ Waiting for Angular application to stabilize in ${environment}..."
        sleep 20
        echo "üîç Verifying Angular application deployment..."
        retry(5) {
            sh """
                echo "Testing Angular application health..."
                curl -f http://localhost:${port}/health || curl -f http://localhost:${port}/ || {
                    echo "Health check failed, checking container status..."
                    docker ps | grep ${containerName}
                    docker logs ${containerName} | tail -10
                    exit 1
                }
            """
            sleep 5
        }
        def deploymentEndTime = System.currentTimeMillis()
        def deploymentDuration = (deploymentEndTime - deploymentStartTime) / 1000
        echo "‚úÖ Angular application successfully deployed to ${environment}!"
        echo "Environment: ${environment}"
        echo "Port: ${port}"
        echo "Container: ${containerName}"
        echo "Duration: ${deploymentDuration} seconds"
        echo "URL: http://localhost:${port}"
        sh """
            echo "üìä Deployment Status:"
            docker ps | grep ${containerName}
            echo "Container health:"
            docker inspect ${containerName} --format='{{.State.Health.Status}}' || echo "Health check not available"
        """
    } catch (Exception e) {
        echo "‚ùå Deployment to ${environment} failed: ${e.getMessage()}"
        sh """
            echo "üîç Deployment debugging information:"
            docker ps -a | grep ${containerName} || echo "Container not found"
            docker logs ${containerName} || echo "No logs available"
            docker inspect ${containerName} || echo "Cannot inspect container"
        """
        throw e
    }
}
