pipeline {
    agent any

    environment {
        DOCKER_REGISTRY = 'https://index.docker.io/v1/'
        DOCKER_USERNAME = 'farajassulai'
        DOCKER_REPO = 'node-app'
        IMAGE_NAME = "${DOCKER_USERNAME}/${DOCKER_REPO}"
        BUILD_TAG = "${env.BUILD_NUMBER}-${env.GIT_COMMIT?.take(7) ?: 'unknown'}"
        CONTAINER_NAME = "node-app-${env.BUILD_NUMBER}"
        TEST_CONTAINER_NAME = "test-container-${env.BUILD_NUMBER}"
        GITHUB_REPO = 'https://github.com/mcsredhat/Jenkins'
        APP_PORT = "3000"
        TEST_PORT = "3030"
        // Define the application directory
        APP_DIR = "node-js"
    }

    stages {
        stage('Checkout') {
            steps {
                echo "üì¶ Checking out code from GitHub repository..."
                checkout scm

                script {
                    echo "Current branch: ${env.BRANCH_NAME ?: 'main'}"
                    echo "Git commit: ${env.GIT_COMMIT ?: 'unknown'}"
                    echo "Repository URL: ${GITHUB_REPO}"
                    
                    echo "Working in directory: ${pwd()}"
                    sh "ls -la"
                    
                    // Check if the app directory exists
                    echo "Checking for application directory: ${APP_DIR}"
                    sh "ls -la ${APP_DIR}/ || echo 'Application directory not found'"
                    
                    // Check for required files in the app directory
                    echo "Checking for required files in ${APP_DIR}:"
                    sh """
                        cd ${APP_DIR}
                        ls -la Dockerfile package*.json ./app/server.js || echo 'Some files not found in ${APP_DIR}'
                        cd ${APP_DIR}/app
                        ls -la server.js || echo 'Some files not found in ${APP_DIR}'
                    """
                }
            }
        }

        stage('Build') {
            steps {
                echo "üîß Building Docker image..."
                script {
                    try {
                        // Change to the application directory for building
                        dir(APP_DIR) {
                            def image = docker.build("${IMAGE_NAME}:${BUILD_TAG}", ".")
                            image.tag("jenkins-latest")
                            echo "‚úÖ Image built successfully: ${IMAGE_NAME}:${BUILD_TAG}"
                        }
                    } catch (Exception e) {
                        echo "‚ùå Build failed: ${e.getMessage()}"
                        throw e
                    }
                }
            }
        }

        stage('Test') {
            steps {
                echo "üß™ Running containerized tests..."
                script {
                    try {
                        sh """
                            docker run -d --name ${TEST_CONTAINER_NAME} \
                            -p ${TEST_PORT}:${APP_PORT} \
                            -e ENVIRONMENT=test \
                            -e APP_PORT=${APP_PORT} \
                            ${IMAGE_NAME}:${BUILD_TAG}
                        """

                        echo "‚åõ Waiting for application to start..."
                        retry(5) {
                            sleep 10
                            sh "curl -f http://localhost:${TEST_PORT}/health || curl -f http://localhost:${TEST_PORT}/"
                        }

                        echo "‚úÖ Health check passed!"
                    } catch (Exception e) {
                        echo "‚ùå Test failed: ${e.getMessage()}"
                        throw e
                    } finally {
                        sh """
                            docker stop ${TEST_CONTAINER_NAME} || true
                            docker rm ${TEST_CONTAINER_NAME} || true
                        """
                    }
                }
            }
        }

        stage('Security Scan') {
            steps {
                echo "üîç Running security scan with Trivy..."
                script {
                    try {
                        sh """
                            docker run --rm -v /var/run/docker.sock:/var/run/docker.sock \
                            aquasec/trivy:latest image \
                            --exit-code 1 --severity HIGH,CRITICAL \
                            --format table \
                            ${IMAGE_NAME}:${BUILD_TAG}
                        """
                        echo "‚úÖ Security scan completed without critical issues"
                    } catch (Exception e) {
                        echo "‚ùå Security scan failed or found HIGH/CRITICAL vulnerabilities: ${e.getMessage()}"
                        throw e
                    }
                }
            }
        }

        stage('Push to Docker Hub') {
            when {
                anyOf {
                    branch 'main'
                    branch 'develop'
                }
            }
            steps {
                echo "üì§ Pushing image to Docker Hub..."
                script {
                    docker.withRegistry("${DOCKER_REGISTRY}", 'dockerhub-credentials') {
                        def image = docker.image("${IMAGE_NAME}:${BUILD_TAG}")

                        image.push()
                        image.push("jenkins-latest")

                        if (env.BRANCH_NAME == 'main') {
                            image.push("production")
                            image.push("v1.0.0")
                        } else if (env.BRANCH_NAME == 'develop') {
                            image.push("staging")
                            image.push("develop-latest")
                        }
                        
                        echo "‚úÖ Image pushed successfully"
                    }
                }
            }
        }

        stage('Deploy to Staging') {
            when {
                branch 'develop'
            }
            steps {
                echo "üöÄ Deploying to staging..."
                script {
                    deployToEnvironment('staging', '8080')
                }
            }
        }

        stage('Deploy to Production') {
            when {
                branch 'main'
            }
            steps {
                input message: 'Deploy to production?', ok: 'Deploy'
                echo "üöÄ Deploying to production..."
                script {
                    deployToEnvironment('production', '80')
                }
            }
        }
    }

    post {
        always {
            echo "üßπ Cleaning up..."
            script {
                sh """
                    docker stop ${TEST_CONTAINER_NAME} || true
                    docker rm ${TEST_CONTAINER_NAME} || true
                    docker system prune -f --filter "until=24h"
                """
            }
        }

        success {
            echo "‚úÖ Pipeline completed successfully!"
            script {
                try {
                    // Only send email if email configuration is available
                    if (env.EMAIL_CONFIGURED == 'true') {
                        emailext(
                            subject: "‚úÖ Build Success: ${env.JOB_NAME} #${env.BUILD_NUMBER}",
                            body: """
                                ‚úîÔ∏è Build succeeded!

                                Job: ${env.JOB_NAME}
                                Build Number: ${env.BUILD_NUMBER}
                                Branch: ${env.BRANCH_NAME ?: 'main'}
                                Image: ${IMAGE_NAME}:${BUILD_TAG}

                                GitHub: ${GITHUB_REPO}
                                Docker Hub: https://hub.docker.com/r/${DOCKER_USERNAME}/${DOCKER_REPO}
                                Build URL: ${env.BUILD_URL}
                            """,
                            recipientProviders: [developers()]
                        )
                    } else {
                        echo "Email notification skipped - EMAIL_CONFIGURED not set to true"
                    }
                } catch (Exception e) {
                    echo "‚ö†Ô∏è Failed to send success email: ${e.getMessage()}"
                }
            }
        }

        failure {
            echo "‚ùå Pipeline failed!"
            script {
                try {
                    // Only send email if email configuration is available
                    if (env.EMAIL_CONFIGURED == 'true') {
                        emailext(
                            subject: "‚ùå Build Failed: ${env.JOB_NAME} #${env.BUILD_NUMBER}",
                            body: """
                                ‚ùå Build failed!

                                Job: ${env.JOB_NAME}
                                Branch: ${env.BRANCH_NAME ?: 'main'}
                                Build URL: ${env.BUILD_URL}

                                Please check the console output for details:
                                ${env.BUILD_URL}console
                            """,
                            recipientProviders: [developers(), requestor()]
                        )
                    } else {
                        echo "Email notification skipped - EMAIL_CONFIGURED not set to true"
                    }
                } catch (Exception e) {
                    echo "‚ö†Ô∏è Failed to send failure email: ${e.getMessage()}"
                }
            }
        }

        unstable {
            echo "‚ö†Ô∏è Pipeline completed with warnings."
        }
    }
}

// Helper function for deployment
def deployToEnvironment(environment, port) {
    def containerName = "node-app-${environment}"
    try {
        sh """
            docker stop ${containerName} || true
            docker rm ${containerName} || true
            docker run -d \
                --name ${containerName} \
                -p ${port}:${APP_PORT} \
                -e ENVIRONMENT=${environment} \
                -e APP_PORT=${APP_PORT} \
                --restart=unless-stopped \
                --memory=512m \
                --cpus=0.5 \
                --health-cmd="curl -f http://localhost:${APP_PORT}/health || exit 1" \
                --health-interval=30s \
                --health-timeout=10s \
                --health-retries=3 \
                ${IMAGE_NAME}:${BUILD_TAG}
        """

        echo "‚åõ Waiting for deployment to stabilize..."
        sleep 15

        retry(3) {
            sh "curl -f http://localhost:${port}/health || curl -f http://localhost:${port}/"
        }

        echo "‚úÖ Successfully deployed to ${environment}"
    } catch (Exception e) {
        echo "‚ùå Deployment to ${environment} failed: ${e.getMessage()}"
        throw e
    }
}
